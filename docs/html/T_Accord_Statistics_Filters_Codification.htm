<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Codification Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Codification class" />
    <meta name="System.Keywords" content="Accord.Statistics.Filters.Codification class" />
    <meta name="System.Keywords" content="Codification class, about Codification class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Filters.Codification" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Filters.Codification" />
    <meta name="Description" content="Codification Filter class." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.Statistics.Filters" />
    <meta name="file" content="T_Accord_Statistics_Filters_Codification" />
    <meta name="guid" content="T_Accord_Statistics_Filters_Codification" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_Statistics_Filters.htm" title="Accord.Statistics.Filters" tocid="N_Accord_Statistics_Filters">Accord.Statistics.Filters</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_Statistics_Filters_Codification.htm" title="Codification Class" tocid="T_Accord_Statistics_Filters_Codification">Codification Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Accord_Statistics_Filters_Codification__ctor.htm" title="Codification Constructor " tocid="Overload_Accord_Statistics_Filters_Codification__ctor">Codification Constructor </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Properties_T_Accord_Statistics_Filters_Codification.htm" title="Codification Properties" tocid="Properties_T_Accord_Statistics_Filters_Codification">Codification Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_Statistics_Filters_Codification.htm" title="Codification Methods" tocid="Methods_T_Accord_Statistics_Filters_Codification">Codification Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>Codification Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
              Codification Filter class.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LST88F294E4_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">Accord.Statistics.Filters<span id="LST88F294E4_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BaseFilter</a><span id="LST88F294E4_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_Accord_Statistics_Filters_Codification_1_Options.htm">Codification<span id="LST88F294E4_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_3?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_4?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script><span id="LST88F294E4_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Options</a>, <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification</a><span id="LST88F294E4_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_6?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="nolink">String</span><span id="LST88F294E4_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_7?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST88F294E4_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_8?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />    <a href="T_Accord_Statistics_Filters_Codification_1.htm">Accord.Statistics.Filters<span id="LST88F294E4_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Codification</a><span id="LST88F294E4_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_10?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="nolink">String</span><span id="LST88F294E4_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_11?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />      <span class="selflink">Accord.Statistics.Filters<span id="LST88F294E4_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_12?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Codification</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_Statistics_Filters.htm">Accord.Statistics.Filters</a><br />
    <strong>Assembly:</strong>
   Accord.Statistics (in Accord.Statistics.dll) Version: 3.8.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Codification</span> : <span class="identifier">Codification</span>&lt;<span class="identifier">string</span>&gt;, 
	<span class="identifier">IAutoConfigurableFilter</span>, <span class="identifier">IFilter</span>, <span class="identifier">ITransform</span>&lt;<span class="identifier">string</span>[], <span class="identifier">double</span>[]&gt;, 
	<span class="identifier">ICovariantTransform</span>&lt;<span class="identifier">string</span>[], <span class="identifier">double</span>[]&gt;, <span class="identifier">ITransform</span></pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Codification</span>
	<span class="keyword">Inherits</span> <span class="identifier">Codification</span>(<span class="keyword">Of</span> <span class="identifier">String</span>)
	<span class="keyword">Implements</span> <span class="identifier">IAutoConfigurableFilter</span>, <span class="identifier">IFilter</span>, <span class="identifier">ITransform</span>(<span class="keyword">Of</span> <span class="identifier">String</span>(), <span class="identifier">Double</span>()), 
	<span class="identifier">ICovariantTransform</span>(<span class="keyword">Of</span> <span class="identifier">String</span>(), <span class="identifier">Double</span>()), <span class="identifier">ITransform</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.Statistics/Filters/Codification.cs" title="View the source code">View Source</a></div><p>The <span class="selflink">Codification</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor.htm">Codification<span id="LST88F294E4_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_13?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor_1.htm">Codification(DataTable)</a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor_2.htm">Codification(DataTable, <span id="LST88F294E4_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_14?cpp=array&lt;");</script>String<span id="LST88F294E4_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_15?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor_3.htm">Codification(String, <span id="LST88F294E4_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_16?cpp=array&lt;");</script>String<span id="LST88F294E4_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_17?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor_4.htm">Codification(String, <span id="LST88F294E4_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_18?cpp=array&lt;");</script><span id="LST88F294E4_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_19?cpp=array&lt;");</script>String<span id="LST88F294E4_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_20?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_21?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification__ctor_5.htm">Codification(<span id="LST88F294E4_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_22?cpp=array&lt;");</script>String<span id="LST88F294E4_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_23?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_24?cpp=array&lt;");</script><span id="LST88F294E4_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_25?cpp=array&lt;");</script>String<span id="LST88F294E4_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_26?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_27?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new Codification Filter.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_Active.htm">Active</a></td><td><div class="summary">
              Gets or sets whether this filter is active. An inactive
              filter will repass the input table as output unchanged.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_28?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_29?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_Columns.htm">Columns</a></td><td><div class="summary">
              Gets the collection of filter options.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_30?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_31?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_Codification_1_DefaultMissingValueReplacement.htm">DefaultMissingValueReplacement</a></td><td><div class="summary">
              Gets or sets the default value to be used as a replacement for missing values. 
              Default is to use <span class="code">System.DBNull.Value</span>.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_32?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_33?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_Item.htm">Item<span id="LST88F294E4_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_34?cs=[|vb=(|cpp=[|nu=(|fs= ");</script>Int32<span id="LST88F294E4_35"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_35?cs=]|vb=)|cpp=]|nu=)|fs= ");</script></a></td><td><div class="summary">
              Gets options associated with a given variable (data column).
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_36"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_36?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_37"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_37?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_Item_1.htm">Item<span id="LST88F294E4_38"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_38?cs=[|vb=(|cpp=[|nu=(|fs= ");</script>String<span id="LST88F294E4_39"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_39?cs=]|vb=)|cpp=]|nu=)|fs= ");</script></a></td><td><div class="summary">
              Gets options associated with a given variable (data column).
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_40"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_40?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_41"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_41?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_NumberOfInputs.htm">NumberOfInputs</a></td><td><div class="summary">
            Gets the number of inputs accepted by the model.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_42"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_42?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_43"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_43?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_Codification_1_NumberOfOutputs.htm">NumberOfOutputs</a></td><td><div class="summary">
            Gets the number of outputs generated by the model.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_44"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_44?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_45"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_45?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Filters_BaseFilter_2_Token.htm">Token</a></td><td><div class="summary">
            Gets or sets a cancellation token that can be used to
            stop the learning algorithm while it is running.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_46"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_46?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_47"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_47?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_BaseFilter_2_Add.htm">Add(TOptions)</a></td><td><div class="summary">
              Add a new column options definition to the collection.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_48"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_48?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_49"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_49?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Add.htm">Add(CodificationVariable)</a></td><td><div class="summary">
            Adds a new <a href="T_Accord_Statistics_Filters_Codification_1_Options.htm">column options</a> to this filter's collection,
            specifying how a particular column should be processed by the filter..
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_50"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_50?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_51"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_51?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Add_1.htm">Add(String, CodificationVariable)</a></td><td><div class="summary">
            Adds a new <a href="T_Accord_Statistics_Filters_Codification_1_Options.htm">column options</a> to this filter's collection,
            specifying how a particular column should be processed by the filter..
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_52"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_52?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_53"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_53?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Add_2.htm">Add(String, CodificationVariable, T)</a></td><td><div class="summary">
            Adds a new <a href="T_Accord_Statistics_Filters_Codification_1_Options.htm">column options</a> to this filter's collection,
            specifying how a particular column should be processed by the filter..
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_54"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_54?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_55"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_55?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Add_3.htm">Add(String, CodificationVariable, <span id="LST88F294E4_56"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_56?cpp=array&lt;");</script>T<span id="LST88F294E4_57"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_57?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Adds a new <a href="T_Accord_Statistics_Filters_Codification_1_Options.htm">column options</a> to this filter's collection,
            specifying how a particular column should be processed by the filter..
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_58"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_58?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_59"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_59?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_BaseFilter_2_Apply.htm">Apply(DataTable)</a></td><td><div class="summary">
              Applies the Filter to a <span class="nolink">DataTable</span>.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_60"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_60?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_61"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_61?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_BaseFilter_2_Apply_1.htm">Apply(DataTable, <span id="LST88F294E4_62"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_62?cpp=array&lt;");</script>String<span id="LST88F294E4_63"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_63?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Applies the Filter to a <span class="nolink">DataTable</span>.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_64"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_64?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_65"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_65?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Detect.htm">Detect(DataTable)</a></td><td><div class="summary">
              Auto detects the filter options by analyzing a given <span class="nolink">DataTable</span>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Detect_1.htm">Detect(DataTable, <span id="LST88F294E4_66"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_66?cpp=array&lt;");</script>String<span id="LST88F294E4_67"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_67?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Auto detects the filter options by analyzing a given <span class="nolink">DataTable</span>.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Detect_2.htm">Detect(String, <span id="LST88F294E4_68"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_68?cpp=array&lt;");</script>String<span id="LST88F294E4_69"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_69?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Auto detects the filter options by analyzing a set of string labels.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Detect_3.htm">Detect(String, <span id="LST88F294E4_70"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_70?cpp=array&lt;");</script><span id="LST88F294E4_71"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_71?cpp=array&lt;");</script>String<span id="LST88F294E4_72"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_72?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_73"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_73?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Auto detects the filter options by analyzing a set of string labels.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Detect_4.htm">Detect(<span id="LST88F294E4_74"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_74?cpp=array&lt;");</script>String<span id="LST88F294E4_75"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_75?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_76"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_76?cpp=array&lt;");</script><span id="LST88F294E4_77"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_77?cpp=array&lt;");</script>String<span id="LST88F294E4_78"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_78?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_79"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_79?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Auto detects the filter options by analyzing a set of string labels.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_BaseFilter_2_GetEnumerator.htm">GetEnumerator</a></td><td><div class="summary">
            Returns an enumerator that iterates through the collection.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_BaseFilter_2.htm">BaseFilter<span id="LST88F294E4_80"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_80?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TOptions, TFilter<span id="LST88F294E4_81"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_81?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Learn.htm">Learn(DataTable, <span id="LST88F294E4_82"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_82?cpp=array&lt;");</script>Double<span id="LST88F294E4_83"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_83?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Learns a model that can map the given inputs to the desired outputs.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_84"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_84?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_85"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_85?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Learn_1.htm">Learn(<span id="LST88F294E4_86"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_86?cpp=array&lt;");</script>T<span id="LST88F294E4_87"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_87?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_88"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_88?cpp=array&lt;");</script>Double<span id="LST88F294E4_89"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_89?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Learns a model that can map the given inputs to the desired outputs.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_90"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_90?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_91"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_91?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Learn_2.htm">Learn(<span id="LST88F294E4_92"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_92?cpp=array&lt;");</script><span id="LST88F294E4_93"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_93?cpp=array&lt;");</script>T<span id="LST88F294E4_94"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_94?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_95"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_95?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_96"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_96?cpp=array&lt;");</script>Double<span id="LST88F294E4_97"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_97?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Learns a model that can map the given inputs to the desired outputs.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_98"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_98?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_99"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_99?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_OnAddingOptions.htm">OnAddingOptions</a></td><td><div class="summary">
            Called when a new column options definition is being added.
            Can be used to validate or modify these options beforehand.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_100"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_100?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_101"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_101?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_ProcessFilter.htm">ProcessFilter</a></td><td><div class="summary">
              Processes the current filter.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_102"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_102?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_103"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_103?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Revert.htm">Revert(<span id="LST88F294E4_104"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_104?cpp=array&lt;");</script>Int32<span id="LST88F294E4_105"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_105?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_106"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_106?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_107"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_107?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Revert_1.htm">Revert(String, Int32)</a></td><td><div class="summary">
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_108"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_108?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_109"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_109?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Revert_2.htm">Revert(String, <span id="LST88F294E4_110"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_110?cpp=array&lt;");</script>Int32<span id="LST88F294E4_111"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_111?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_112"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_112?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_113"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_113?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Revert_3.htm">Revert(<span id="LST88F294E4_114"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_114?cpp=array&lt;");</script>String<span id="LST88F294E4_115"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_115?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_116"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_116?cpp=array&lt;");</script>Int32<span id="LST88F294E4_117"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_117?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates the integer (codeword) representations of
              the values of the given variables into their original
              values.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_118"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_118?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_119"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_119?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_ToDouble.htm">ToDouble</a></td><td><div class="summary">
              Converts this instance into a transform that can generate double[].
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_120"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_120?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_121"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_121?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Transform.htm">Transform(<span id="LST88F294E4_122"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_122?cpp=array&lt;");</script>String<span id="LST88F294E4_123"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_123?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a></td><td><div class="summary">
              Transforms a matrix of key-value pairs (where the first column
              denotes a key, and the second column a value) into their integer
              vector representation.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_8.htm">Transform(<span id="LST88F294E4_124"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_124?cpp=array&lt;");</script>T<span id="LST88F294E4_125"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_125?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_126"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_126?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_127"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_127?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_9.htm">Transform(<span id="LST88F294E4_128"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_128?cpp=array&lt;");</script><span id="LST88F294E4_129"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_129?cpp=array&lt;");</script>T<span id="LST88F294E4_130"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_130?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_131"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_131?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_132"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_132?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_133"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_133?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform.htm">Transform(DataRow, <span id="LST88F294E4_134"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_134?cpp=array&lt;");</script>String<span id="LST88F294E4_135"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_135?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_136"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_136?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_137"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_137?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_2.htm">Transform(DataTable, <span id="LST88F294E4_138"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_138?cpp=array&lt;");</script>String<span id="LST88F294E4_139"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_139?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_140"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_140?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_141"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_141?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_4.htm">Transform(String, T)</a></td><td><div class="summary">
              Translates a value of a given variable
              into its integer (codeword) representation.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_142"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_142?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_143"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_143?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_5.htm">Transform(String, <span id="LST88F294E4_144"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_144?cpp=array&lt;");</script>T<span id="LST88F294E4_145"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_145?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_146"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_146?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_147"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_147?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_7.htm">Transform(<span id="LST88F294E4_148"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_148?cpp=array&lt;");</script>String<span id="LST88F294E4_149"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_149?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_150"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_150?cpp=array&lt;");</script>T<span id="LST88F294E4_151"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_151?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_152"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_152?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_153"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_153?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_10.htm">Transform(<span id="LST88F294E4_154"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_154?cpp=array&lt;");</script><span id="LST88F294E4_155"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_155?cpp=array&lt;");</script>T<span id="LST88F294E4_156"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_156?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_157"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_157?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_158"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_158?cpp=array&lt;");</script><span id="LST88F294E4_159"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_159?cpp=array&lt;");</script>Double<span id="LST88F294E4_160"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_160?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_161"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_161?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Applies the transformation to a set of input vectors,
            producing an associated set of output vectors.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_162"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_162?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_163"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_163?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_11.htm">Transform(<span id="LST88F294E4_164"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_164?cpp=array&lt;");</script><span id="LST88F294E4_165"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_165?cpp=array&lt;");</script>T<span id="LST88F294E4_166"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_166?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_167"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_167?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_168"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_168?cpp=array&lt;");</script><span id="LST88F294E4_169"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_169?cpp=array&lt;");</script>Int32<span id="LST88F294E4_170"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_170?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_171"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_171?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_172"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_172?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_173"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_173?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_1.htm">Transform(DataRow, <span id="LST88F294E4_174"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_174?cpp=array&lt;");</script>String<span id="LST88F294E4_175"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_175?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_176"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_176?cpp=array&lt;");</script>String<span id="LST88F294E4_177"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_177?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_178"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_178?cpp=%");</script>)</a></td><td><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_179"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_179?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_180"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_180?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_1_Transform_3.htm">Transform(DataTable, <span id="LST88F294E4_181"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_181?cpp=array&lt;");</script>String<span id="LST88F294E4_182"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_182?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_183"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_183?cpp=array&lt;");</script>String<span id="LST88F294E4_184"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_184?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_185"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_185?cpp=%");</script>)</a></td><td><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div> (Inherited from <a href="T_Accord_Statistics_Filters_Codification_1.htm">Codification<span id="LST88F294E4_186"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_186?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_187"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_187?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_6.htm">Translate(<span id="LST88F294E4_188"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_188?cpp=array&lt;");</script>String<span id="LST88F294E4_189"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_189?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate.htm">Translate(DataRow, <span id="LST88F294E4_190"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_190?cpp=array&lt;");</script>String<span id="LST88F294E4_191"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_191?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates an array of values into their
              integer representation, assuming values
              are given in original order of columns.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_1.htm">Translate(String, Int32)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_2.htm">Translate(String, <span id="LST88F294E4_192"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_192?cpp=array&lt;");</script>Int32<span id="LST88F294E4_193"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_193?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates an integer (codeword) representation of
              the value of a given variable into its original
              value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_3.htm">Translate(String, String)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates a value of a given variable
              into its integer (codeword) representation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_4.htm">Translate(String, <span id="LST88F294E4_194"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_194?cpp=array&lt;");</script>String<span id="LST88F294E4_195"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_195?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_5.htm">Translate(String, <span id="LST88F294E4_196"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_196?cpp=array&lt;");</script><span id="LST88F294E4_197"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_197?cpp=array&lt;");</script>String<span id="LST88F294E4_198"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_198?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LST88F294E4_199"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_199?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_7.htm">Translate(<span id="LST88F294E4_200"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_200?cpp=array&lt;");</script>String<span id="LST88F294E4_201"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_201?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_202"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_202?cpp=array&lt;");</script>Int32<span id="LST88F294E4_203"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_203?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates the integer (codeword) representations of
              the values of the given variables into their original
              values.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Filters_Codification_Translate_8.htm">Translate(<span id="LST88F294E4_204"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_204?cpp=array&lt;");</script>String<span id="LST88F294E4_205"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_205?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST88F294E4_206"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_206?cpp=array&lt;");</script>String<span id="LST88F294E4_207"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_207?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Translates a value of the given variables
              into their integer (codeword) representation.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">
                Compares two objects for equality, performing an elementwise 
                comparison if the elements are vectors or matrices.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To.htm">To(Type)</a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LST88F294E4_208"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_208?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST88F294E4_209"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_209?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST88F294E4_210"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_210?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
              The codification filter performs an integer codification of classes in
              given in a string form. An unique integer identifier will be assigned
              for each of the string classes.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
              When handling data tables, often there will be cases in which a single
              table contains both numerical variables and categorical data in the form
              of text labels. Since most machine learning and statistics algorithms
              expect their data to be numeric, the codification filter can be used
              to create mappings between text labels and discrete symbols.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EASCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EASCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EASCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Show the start data</span>
DataGridBox.Show(table);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EASCBA");</script><img src="..\images\filters\input-table.png" /><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAQCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAQCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAQCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Create a new data projection (column) filter</span>
<span class="highlight-keyword">var</span> filter = <span class="highlight-keyword">new</span> Codification(table, <span class="highlight-literal">"Category"</span>);

<span class="highlight-comment">// Apply the filter and get the result</span>
DataTable result = filter.Apply(table);

<span class="highlight-comment">// Show it</span>
DataGridBox.Show(result);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAQCBA");</script><img src="..\images\filters\output-codification.png" /><p>
              The following more elaborated examples show how to use the <span class="selflink">Codification</span> filter without
              necessarily handling <span class="code">System.Data.DataTable</span>s.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EANCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EANCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EANCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Suppose we have a data table relating the age of</span>
<span class="highlight-comment">// a person and its categorical classification, as </span>
<span class="highlight-comment">// in "child", "adult" or "elder".</span>

<span class="highlight-comment">// The Codification filter is able to extract those</span>
<span class="highlight-comment">// string labels and transform them into discrete</span>
<span class="highlight-comment">// symbols, assigning integer labels to each of them</span>
<span class="highlight-comment">// such as "child" = 0, "adult" = 1, and "elder" = 3.</span>

<span class="highlight-comment">// Create the aforementioned sample table</span>
DataTable table = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Sample data"</span>);
table.Columns.Add(<span class="highlight-literal">"Age"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">int</span>));
table.Columns.Add(<span class="highlight-literal">"Label"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));

<span class="highlight-comment">//            age   label</span>
table.Rows.Add(<span class="highlight-number">10</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">07</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">04</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">21</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">27</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">12</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">79</span>, <span class="highlight-literal">"elder"</span>);
table.Rows.Add(<span class="highlight-number">40</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">30</span>, <span class="highlight-literal">"adult"</span>);


<span class="highlight-comment">// Now, let's say we need to translate those text labels</span>
<span class="highlight-comment">// into integer symbols. Let's use a Codification filter:</span>

<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification(table);


<span class="highlight-comment">// After that, we can use the codebook to "translate"</span>
<span class="highlight-comment">// the text labels into discrete symbols, such as:</span>

<span class="highlight-keyword">int</span> a = codebook.Transform(columnName: <span class="highlight-literal">"Label"</span>, <span class="highlight-keyword">value</span>: <span class="highlight-literal">"child"</span>); <span class="highlight-comment">// returns 0</span>
<span class="highlight-keyword">int</span> b = codebook.Transform(columnName: <span class="highlight-literal">"Label"</span>, <span class="highlight-keyword">value</span>: <span class="highlight-literal">"adult"</span>); <span class="highlight-comment">// returns 1</span>
<span class="highlight-keyword">int</span> c = codebook.Transform(columnName: <span class="highlight-literal">"Label"</span>, <span class="highlight-keyword">value</span>: <span class="highlight-literal">"elder"</span>); <span class="highlight-comment">// returns 2</span>

<span class="highlight-comment">// We can also do the reverse:</span>
<span class="highlight-keyword">string</span> labela = codebook.Revert(columnName: <span class="highlight-literal">"Label"</span>, codeword: <span class="highlight-number">0</span>); <span class="highlight-comment">// returns "child"</span>
<span class="highlight-keyword">string</span> labelb = codebook.Revert(columnName: <span class="highlight-literal">"Label"</span>, codeword: <span class="highlight-number">1</span>); <span class="highlight-comment">// returns "adult"</span>
<span class="highlight-keyword">string</span> labelc = codebook.Revert(columnName: <span class="highlight-literal">"Label"</span>, codeword: <span class="highlight-number">2</span>); <span class="highlight-comment">// returns "elder"</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EANCBA");</script><p>
              After we have created the codebook, we can use it to feed data with
              categorical variables to method which would otherwise not know how
              to handle text labels data. Continuing with our example, the next
              code section shows how to convert an entire data table into a numerical
              matrix. </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EALCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// We can also process an entire data table at once:</span>
DataTable result = codebook.Apply(table);

<span class="highlight-comment">// The resulting table can be transformed to jagged array:</span>
<span class="highlight-keyword">double</span>[][] matrix = Matrix.ToArray(result);

<span class="highlight-comment">// and the resulting matrix will be given by</span>
<span class="highlight-keyword">string</span> str = matrix.ToCSharp();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALCBA");</script><p>
              Finally, by expressing our data in terms of a simple numerical
              matrix we will be able to feed it to any machine learning algorithm.
              The following code section shows how to create a <a href="T_Accord_Statistics_Kernels_Linear.htm">
              linear</a> multi-class Support Vector Machine to classify ages into any
              of the previously considered text labels ("child", "adult" or "elder").</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAJCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAJCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAJCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Now we will be able to feed this matrix to any machine learning</span>
<span class="highlight-comment">// algorithm without having to worry about text labels in our data:</span>

<span class="highlight-comment">// Use the first column as input variables,</span>
<span class="highlight-comment">// and the second column as outputs classes</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">double</span>[][] inputs = matrix.GetColumns(<span class="highlight-number">0</span>);
<span class="highlight-keyword">int</span>[] outputs = matrix.GetColumn(<span class="highlight-number">1</span>).ToInt32();

<span class="highlight-comment">// Create a Multi-class learning algorithm for the machine</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> MulticlassSupportVectorLearning&lt;Linear&gt;()
{
    Learner = (p) =&gt; <span class="highlight-keyword">new</span> SequentialMinimalOptimization&lt;Linear&gt;()
    {
        Complexity = <span class="highlight-number">1</span>
    }
};

<span class="highlight-comment">// Run the learning algorithm</span>
<span class="highlight-keyword">var</span> svm = teacher.Learn(inputs, outputs);

<span class="highlight-comment">// Compute the classification error (should be 0)</span>
<span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(svm.Decide(inputs));


<span class="highlight-comment">// After we have learned the machine, we can use it to classify</span>
<span class="highlight-comment">// new data points, and use the codebook to translate the machine</span>
<span class="highlight-comment">// outputs to the original text labels:</span>

<span class="highlight-keyword">string</span> result1 = codebook.Revert(<span class="highlight-literal">"Label"</span>, svm.Decide(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">10</span> })); <span class="highlight-comment">// child</span>
<span class="highlight-keyword">string</span> result2 = codebook.Revert(<span class="highlight-literal">"Label"</span>, svm.Decide(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">40</span> })); <span class="highlight-comment">// adult</span>
<span class="highlight-keyword">string</span> result3 = codebook.Revert(<span class="highlight-literal">"Label"</span>, svm.Decide(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">70</span> })); <span class="highlight-comment">// elder</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAJCBA");</script><p>
              Every Learn() method in the framework expects the class labels to be contiguous and zero-indexed,
              meaning that if there is a classification problem with n classes, all class labels must be numbers
              ranging from 0 to n-1. However, not every dataset might be in this format and sometimes we will
              have to pre-process the data to be in this format. The example below shows how to use the 
              Codification class to perform such pre-processing.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAHCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Let's say we have the following data to be classified</span>
<span class="highlight-comment">// into three possible classes. Those are the samples:</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">double</span>[][] inputs =
{
    <span class="highlight-comment">//               input         output</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0 </span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
};

<span class="highlight-comment">// Now, suppose that our class labels are not contiguous. We</span>
<span class="highlight-comment">// have 3 classes, but they have the class labels 5, 1, and 8</span>
<span class="highlight-comment">// respectively. In this case, we can use a Codification filter</span>
<span class="highlight-comment">// to obtain a contiguous zero-indexed labeling before learning</span>
<span class="highlight-keyword">int</span>[] output_labels =
{
    <span class="highlight-number">5</span>, <span class="highlight-number">5</span>, <span class="highlight-number">5</span>, <span class="highlight-number">5</span>, <span class="highlight-number">5</span>,
    <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,
    <span class="highlight-number">8</span>, <span class="highlight-number">8</span>, <span class="highlight-number">8</span>, <span class="highlight-number">8</span>, <span class="highlight-number">8</span>,
};

<span class="highlight-comment">// Create a codification object to obtain a output mapping</span>
<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification&lt;<span class="highlight-keyword">int</span>&gt;().Learn(output_labels);

<span class="highlight-comment">// Transform the original labels using the codebook</span>
<span class="highlight-keyword">int</span>[] outputs = codebook.Transform(output_labels);

<span class="highlight-comment">// Create the multi-class learning algorithm for the machine</span>
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> MulticlassSupportVectorLearning&lt;Gaussian&gt;()
{
    <span class="highlight-comment">// Configure the learning algorithm to use SMO to train the</span>
    <span class="highlight-comment">//  underlying SVMs in each of the binary class subproblems.</span>
    Learner = (param) =&gt; <span class="highlight-keyword">new</span> SequentialMinimalOptimization&lt;Gaussian&gt;()
    {
        <span class="highlight-comment">// Estimate a suitable guess for the Gaussian kernel's parameters.</span>
        <span class="highlight-comment">// This estimate can serve as a starting point for a grid search.</span>
        UseKernelEstimation = <span class="highlight-keyword">true</span>
    }
};

<span class="highlight-comment">// The following line is only needed to ensure reproducible results. Please remove it to enable full parallelization</span>
teacher.ParallelOptions.MaxDegreeOfParallelism = <span class="highlight-number">1</span>; <span class="highlight-comment">// (Remove, comment, or change this line to enable full parallelism)</span>

<span class="highlight-comment">// Learn a machine</span>
<span class="highlight-keyword">var</span> machine = teacher.Learn(inputs, outputs);

<span class="highlight-comment">// Obtain class predictions for each sample</span>
<span class="highlight-keyword">int</span>[] predicted = machine.Decide(inputs);

<span class="highlight-comment">// Translate the integers back to the original lagbels</span>
<span class="highlight-keyword">int</span>[] predicted_labels = codebook.Revert(predicted);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHCBA");</script><p>
              The codification filter can also work with missing values. The example below shows how a codification codebook
              can be created from a dataset that includes missing values and how to use this codebook to replace missing values
              by some other representation (in the case below, replacing <span class="code">null</span> by <span class="code">NaN</span> double numbers.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">            <span class="highlight-comment">// In this example, we will be using a modified version of the famous Play Tennis </span>
            <span class="highlight-comment">// example by Tom Mitchell (1998), where some values have been replaced by missing </span>
            <span class="highlight-comment">// values. We will use NaN double values to represent values missing from the data.</span>

            <span class="highlight-comment">// Note: this example uses DataTables to represent the input data, </span>
            <span class="highlight-comment">// but this is not required. The same could be performed using plain</span>
            <span class="highlight-comment">// double[][] matrices and vectors instead.</span>
            DataTable data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Tennis Example with Missing Values"</span>);

            data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));
            data.Columns.Add(<span class="highlight-literal">"Outlook"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));
            data.Columns.Add(<span class="highlight-literal">"Temperature"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));
            data.Columns.Add(<span class="highlight-literal">"Humidity"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));
            data.Columns.Add(<span class="highlight-literal">"Wind"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));
            data.Columns.Add(<span class="highlight-literal">"PlayTennis"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));

            data.Rows.Add(<span class="highlight-literal">"D1"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"No"</span>);
            data.Rows.Add(<span class="highlight-literal">"D2"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);
            data.Rows.Add(<span class="highlight-literal">"D3"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D4"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D5"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D6"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);
            data.Rows.Add(<span class="highlight-literal">"D7"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D8"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"No"</span>);
            data.Rows.Add(<span class="highlight-literal">"D9"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D10"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D11"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D12"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D13"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-keyword">null</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
            data.Rows.Add(<span class="highlight-literal">"D14"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);

            <span class="highlight-comment">// Create a new codification codebook to convert </span>
            <span class="highlight-comment">// the strings above into numeric, integer labels:</span>
            <span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification()
            {
                DefaultMissingValueReplacement = Double.NaN
            };

            <span class="highlight-comment">// Learn the codebook</span>
            codebook.Learn(data);

            <span class="highlight-comment">// Use the codebook to convert all the data</span>
            DataTable symbols = codebook.Apply(data);

            <span class="highlight-comment">// Grab the training input and output instances:</span>
            <span class="highlight-keyword">string</span>[] inputNames = <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span> };
            <span class="highlight-keyword">double</span>[][] inputs = symbols.ToJagged(inputNames);
            <span class="highlight-keyword">int</span>[] outputs = symbols.ToArray&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"PlayTennis"</span>);

            <span class="highlight-comment">// Create a new learning algorithm</span>
            <span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> C45Learning()
            {
                Attributes = DecisionVariable.FromCodebook(codebook, inputNames)
            };

            <span class="highlight-comment">// Use the learning algorithm to induce a new tree:</span>
            DecisionTree tree = teacher.Learn(inputs, outputs);

            <span class="highlight-comment">// To get the estimated class labels, we can use</span>
            <span class="highlight-keyword">int</span>[] predicted = tree.Decide(inputs);

            <span class="highlight-comment">// The classification error (~0.214) can be computed as </span>
            <span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(predicted);

            <span class="highlight-comment">// Moreover, we may decide to convert our tree to a set of rules:</span>
            DecisionSet rules = tree.ToRules();

            <span class="highlight-comment">// And using the codebook, we can inspect the tree reasoning:</span>
            <span class="highlight-keyword">string</span> ruleText = rules.ToString(codebook, <span class="highlight-literal">"PlayTennis"</span>,
                System.Globalization.CultureInfo.InvariantCulture);

            <span class="highlight-comment">// The output should be:</span>
            <span class="highlight-keyword">string</span> expected = <span class="highlight-literal">@"No =: (Outlook == Sunny)
No =: (Outlook == Rain) &amp;&amp; (Wind == Strong)
Yes =: (Outlook == Overcast)
Yes =: (Outlook == Rain) &amp;&amp; (Wind == Weak)
"</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFCBA");</script><p>
              The codification can also support more advanced scenarios where it is necessary to use different categorical
              representations for different variables, such as one-hot-vectors and categorical-with-baselines, as shown
              in the example below:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// This example downloads an example dataset from the web and learns a multinomial logistic </span>
<span class="highlight-comment">// regression on it. However, please keep in mind that the Multinomial Logistic Regression </span>
<span class="highlight-comment">// can also work without many of the elements that will be shown below, like the codebook, </span>
<span class="highlight-comment">// DataTables, and a CsvReader. </span>

<span class="highlight-comment">// Let's download an example dataset from the web to learn a multinomial logistic regression:</span>
CsvReader reader = CsvReader.FromUrl(<span class="highlight-literal">"https://raw.githubusercontent.com/rlowrance/re/master/hsbdemo.csv"</span>, hasHeaders: <span class="highlight-keyword">true</span>);

<span class="highlight-comment">// Let's read the CSV into a DataTable. As mentioned above, this step</span>
<span class="highlight-comment">// can help, but is not necessarily required for learning a the model:</span>
DataTable table = reader.ToTable();

<span class="highlight-comment">// We will learn a MLR regression between the following input and output fields of this table:</span>
<span class="highlight-keyword">string</span>[] inputNames = <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"write"</span>, <span class="highlight-literal">"ses"</span> };
<span class="highlight-keyword">string</span>[] outputNames = <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"prog"</span> };

<span class="highlight-comment">// Now let's create a codification codebook to convert the string fields in the data </span>
<span class="highlight-comment">// into integer symbols. This is required because the MLR model can only learn from </span>
<span class="highlight-comment">// numeric data, so strings have to be transformed first. We can force a particular</span>
<span class="highlight-comment">// interpretation for those columns if needed, as shown in the initializer below:</span>
<span class="highlight-keyword">var</span> codification = <span class="highlight-keyword">new</span> Codification()
{
    { <span class="highlight-literal">"write"</span>, CodificationVariable.Continuous },
    { <span class="highlight-literal">"ses"</span>, CodificationVariable.CategoricalWithBaseline, <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"low"</span>, <span class="highlight-literal">"middle"</span>, <span class="highlight-literal">"high"</span> } },
    { <span class="highlight-literal">"prog"</span>, CodificationVariable.Categorical, <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"academic"</span>, <span class="highlight-literal">"general"</span> } },
};

<span class="highlight-comment">// Learn the codification</span>
codification.Learn(table);

<span class="highlight-comment">// Now, transform symbols into a vector representation, growing the number of inputs:</span>
<span class="highlight-keyword">double</span>[][] x = codification.Transform(table, inputNames, <span class="highlight-keyword">out</span> inputNames).ToDouble();
<span class="highlight-keyword">double</span>[][] y = codification.Transform(table, outputNames, <span class="highlight-keyword">out</span> outputNames).ToDouble();

<span class="highlight-comment">// Create a new Multinomial Logistic Regression Analysis:</span>
<span class="highlight-keyword">var</span> analysis = <span class="highlight-keyword">new</span> MultinomialLogisticRegressionAnalysis()
{
    InputNames = inputNames,
    OutputNames = outputNames,
};

<span class="highlight-comment">// Learn the regression from the input and output pairs:</span>
MultinomialLogisticRegression regression = analysis.Learn(x, y);

<span class="highlight-comment">// Let's retrieve some information about what we just learned:</span>
<span class="highlight-keyword">int</span> coefficients = analysis.Coefficients.Count; <span class="highlight-comment">// should be 9</span>
<span class="highlight-keyword">int</span> numberOfInputs = analysis.NumberOfInputs;   <span class="highlight-comment">// should be 3</span>
<span class="highlight-keyword">int</span> numberOfOutputs = analysis.NumberOfOutputs; <span class="highlight-comment">// should be 3</span>

inputNames = analysis.InputNames; <span class="highlight-comment">// should be "write", "ses: middle", "ses: high"</span>
outputNames = analysis.OutputNames; <span class="highlight-comment">// should be "prog: academic", "prog: general", "prog: vocation"</span>

<span class="highlight-comment">// The regression is best visualized when it is data-bound to a </span>
<span class="highlight-comment">// Windows.Forms DataGridView or WPF DataGrid. You can get the</span>
<span class="highlight-comment">// values for all different coefficients and discrete values:</span>

<span class="highlight-comment">// DataGridBox.Show(regression.Coefficients); // uncomment this line</span>

<span class="highlight-comment">// You can get the matrix of coefficients:</span>
<span class="highlight-keyword">double</span>[][] coef = analysis.CoefficientValues;

<span class="highlight-comment">// Should be equal to:</span>
<span class="highlight-keyword">double</span>[][] expectedCoef = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][]
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2.85217775752471</span>, <span class="highlight-number">-0.0579282723520426</span>, <span class="highlight-number">-0.533293368378012</span>, <span class="highlight-number">-1.16283850605289</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">5.21813357698422</span>, <span class="highlight-number">-0.113601186660817</span>, <span class="highlight-number">0.291387041358367</span>, <span class="highlight-number">-0.9826369387481</span> }
};

<span class="highlight-comment">// And their associated standard errors:</span>
<span class="highlight-keyword">double</span>[][] stdErr = analysis.StandardErrors;

<span class="highlight-comment">// Should be equal to:</span>
<span class="highlight-keyword">double</span>[][] expectedErr = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][]
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-2.02458003380033</span>, <span class="highlight-number">-0.339533576505471</span>, <span class="highlight-number">-1.164084923948</span>, <span class="highlight-number">-0.520961533343425</span>, <span class="highlight-number">0.0556314901718</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-3.73971589217449</span>, <span class="highlight-number">-1.47672790071382</span>, <span class="highlight-number">-1.76795568348094</span>, <span class="highlight-number">-0.495032307980058</span>, <span class="highlight-number">0.113563519656386</span> }
};

<span class="highlight-comment">// We can also get statistics and hypothesis tests:</span>
WaldTest[][] wald = analysis.WaldTests;        <span class="highlight-comment">// should all have p &lt; 0.05</span>
ChiSquareTest chiSquare = analysis.ChiSquare;  <span class="highlight-comment">// should be p=1.06300120956871E-08</span>
<span class="highlight-keyword">double</span> logLikelihood = analysis.LogLikelihood; <span class="highlight-comment">// should be -179.98173272217591</span>

<span class="highlight-comment">// You can use the regression to predict the values:</span>
<span class="highlight-keyword">int</span>[] pred = regression.Transform(x);

<span class="highlight-comment">// And get the accuracy of the prediction if needed:</span>
<span class="highlight-keyword">var</span> cm = GeneralConfusionMatrix.Estimate(regression, x, y.ArgMax(dimension: <span class="highlight-number">1</span>));

<span class="highlight-keyword">double</span> acc = cm.Accuracy; <span class="highlight-comment">// should be 0.61</span>
<span class="highlight-keyword">double</span> kappa = cm.Kappa;  <span class="highlight-comment">// should be 0.2993487536492252</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADCBA");</script><p>
              Another examples of an advanced scenario where the source dataset contains both symbolic and discrete/continuous
              variables are shown below:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABCBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Let's say we would like predict a continuous number from a set </span>
<span class="highlight-comment">// of discrete and continuous input variables. For this, we will </span>
<span class="highlight-comment">// be using the Servo dataset from UCI's Machine Learning repository </span>
<span class="highlight-comment">// as an example: http://archive.ics.uci.edu/ml/datasets/Servo</span>

<span class="highlight-comment">// Create a Servo dataset</span>
Servo servo = <span class="highlight-keyword">new</span> Servo();
<span class="highlight-keyword">object</span>[][] instances = servo.Instances; <span class="highlight-comment">// 167 x 4 </span>
<span class="highlight-keyword">double</span>[] outputs = servo.Output;        <span class="highlight-comment">// 167 x 1</span>

<span class="highlight-comment">// This dataset contains 4 columns, where the first two are </span>
<span class="highlight-comment">// symbolic (having possible values A, B, C, D, E), and the</span>
<span class="highlight-comment">// last two are continuous.</span>

<span class="highlight-comment">// We will use a codification filter to transform the symbolic </span>
<span class="highlight-comment">// variables into one-hot vectors, while keeping the other two</span>
<span class="highlight-comment">// continuous variables intact:</span>
<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification&lt;<span class="highlight-keyword">object</span>&gt;()
{
    { <span class="highlight-literal">"motor"</span>, CodificationVariable.Categorical },
    { <span class="highlight-literal">"screw"</span>, CodificationVariable.Categorical },
    { <span class="highlight-literal">"pgain"</span>, CodificationVariable.Continuous },
    { <span class="highlight-literal">"vgain"</span>, CodificationVariable.Continuous },
};

<span class="highlight-comment">// Learn the codebook</span>
codebook.Learn(instances);

<span class="highlight-comment">// We can gather some info about the problem:</span>
<span class="highlight-keyword">int</span> numberOfInputs = codebook.NumberOfInputs;   <span class="highlight-comment">// should be 4 (since there are 4 variables)</span>
<span class="highlight-keyword">int</span> numberOfOutputs = codebook.NumberOfOutputs; <span class="highlight-comment">// should be 12 (due their one-hot encodings)</span>

<span class="highlight-comment">// Now we can use it to obtain double[] vectors:</span>
<span class="highlight-keyword">double</span>[][] inputs = codebook.ToDouble().Transform(instances);

<span class="highlight-comment">// We will use Ordinary Least Squares to create a</span>
<span class="highlight-comment">// linear regression model with an intercept term</span>
<span class="highlight-keyword">var</span> ols = <span class="highlight-keyword">new</span> OrdinaryLeastSquares()
{
    UseIntercept = <span class="highlight-keyword">true</span>
};

<span class="highlight-comment">// Use Ordinary Least Squares to estimate a regression model:</span>
MultipleLinearRegression regression = ols.Learn(inputs, outputs);

<span class="highlight-comment">// We can compute the predicted points using:</span>
<span class="highlight-keyword">double</span>[] predicted = regression.Transform(inputs);

<span class="highlight-comment">// And the squared error using the SquareLoss class:</span>
<span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> SquareLoss(outputs).Loss(predicted);

<span class="highlight-comment">// We can also compute other measures, such as the coefficient of determination r² using:</span>
<span class="highlight-keyword">double</span> r2 = <span class="highlight-keyword">new</span> RSquaredLoss(numberOfOutputs, outputs).Loss(predicted); <span class="highlight-comment">// should be 0.55086630162967354</span>

<span class="highlight-comment">// Or the adjusted or weighted versions of r² using:</span>
<span class="highlight-keyword">var</span> r2loss = <span class="highlight-keyword">new</span> RSquaredLoss(numberOfOutputs, outputs)
{
    Adjust = <span class="highlight-keyword">true</span>,        
    <span class="highlight-comment">// Weights = weights; // (uncomment if you have a weighted problem)</span>
};

<span class="highlight-keyword">double</span> ar2 = r2loss.Loss(predicted); <span class="highlight-comment">// should be 0.51586887058782993</span>

<span class="highlight-comment">// Alternatively, we can also use the less generic, but maybe more user-friendly method directly:</span>
<span class="highlight-keyword">double</span> ur2 = regression.CoefficientOfDetermination(inputs, outputs, adjust: <span class="highlight-keyword">true</span>); <span class="highlight-comment">// should be 0.51586887058782993</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABCBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Note: this example uses a System.Data.DataTable to represent input data,</span>
<span class="highlight-comment">// but note that this is not required. The data could have been represented</span>
<span class="highlight-comment">// as jagged double matrices (double[][]) directly.</span>

<span class="highlight-comment">// If you have to handle heterogeneus data in your application, such as user records</span>
<span class="highlight-comment">// in a database, this data is best represented within the framework using a .NET's </span>
<span class="highlight-comment">// DataTable object. In order to try to learn a classification or regression model</span>
<span class="highlight-comment">// using this datatable, first we will need to convert the table into a representation</span>
<span class="highlight-comment">// that the machine learning model can understand. Such representation is quite often,</span>
<span class="highlight-comment">// a matrix of doubles (double[][]).</span>
<span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Customer Revenue Example"</span>);

data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-literal">"CustomerId"</span>, <span class="highlight-literal">"Time (hour)"</span>, <span class="highlight-literal">"Weather"</span>, <span class="highlight-literal">"Revenue"</span>);
data.Rows.Add(<span class="highlight-literal">"D1"</span>, <span class="highlight-number">0</span>, <span class="highlight-number">8</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-number">101.2</span>);
data.Rows.Add(<span class="highlight-literal">"D2"</span>, <span class="highlight-number">1</span>, <span class="highlight-number">10</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-number">24.1</span>);
data.Rows.Add(<span class="highlight-literal">"D3"</span>, <span class="highlight-number">2</span>, <span class="highlight-number">10</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-number">107</span>);
data.Rows.Add(<span class="highlight-literal">"D4"</span>, <span class="highlight-number">3</span>, <span class="highlight-number">16</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-number">223</span>);
data.Rows.Add(<span class="highlight-literal">"D5"</span>, <span class="highlight-number">4</span>, <span class="highlight-number">15</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-number">1</span>);
data.Rows.Add(<span class="highlight-literal">"D6"</span>, <span class="highlight-number">5</span>, <span class="highlight-number">20</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-number">42</span>);
data.Rows.Add(<span class="highlight-literal">"D7"</span>, <span class="highlight-number">6</span>, <span class="highlight-number">12</span>, <span class="highlight-literal">"Cloudy"</span>, <span class="highlight-number">123</span>);
data.Rows.Add(<span class="highlight-literal">"D8"</span>, <span class="highlight-number">7</span>, <span class="highlight-number">12</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-number">64</span>);

<span class="highlight-comment">// One way to perform this conversion is by using a Codification filter. The Codification</span>
<span class="highlight-comment">// filter can take care of converting variables that actually denote symbols (i.e. the </span>
<span class="highlight-comment">// weather in the example above) into representations that make more sense given the assumption</span>
<span class="highlight-comment">// of a real vector-based classifier.</span>

<span class="highlight-comment">// Create a codification codebook</span>
<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification()
{
    { <span class="highlight-literal">"Weather"</span>, CodificationVariable.Categorical },
    { <span class="highlight-literal">"Time (hour)"</span>, CodificationVariable.Continuous },
    { <span class="highlight-literal">"Revenue"</span>, CodificationVariable.Continuous },
};

<span class="highlight-comment">// Learn from the data</span>
codebook.Learn(data);

<span class="highlight-comment">// Now, we will use the codebook to transform the DataTable into double[][] vectors. Due</span>
<span class="highlight-comment">// the way the conversion works, we can end up with more columns in your output vectors</span>
<span class="highlight-comment">// than the ones started with. If you would like more details about what those columns</span>
<span class="highlight-comment">// represent, you can pass then as 'out' parameters in the methods that follow below.</span>
<span class="highlight-keyword">string</span>[] inputNames;  <span class="highlight-comment">// (note: if you do not want to run this example yourself, you </span>
<span class="highlight-keyword">string</span> outputName;    <span class="highlight-comment">// can see below the new variable names that will be generated)</span>

<span class="highlight-comment">// Now, we can translate our training data into integer symbols using our codebook:</span>
<span class="highlight-keyword">double</span>[][] inputs = codebook.Apply(data, <span class="highlight-literal">"Weather"</span>, <span class="highlight-literal">"Time (hour)"</span>).ToJagged(<span class="highlight-keyword">out</span> inputNames);
<span class="highlight-keyword">double</span>[] outputs = codebook.Apply(data, <span class="highlight-literal">"Revenue"</span>).ToVector(<span class="highlight-keyword">out</span> outputName);
<span class="highlight-comment">// (note: the Apply method transform a DataTable into another DataTable containing the codified </span>
<span class="highlight-comment">//  variables. The ToJagged and ToVector methods are then used to transform those tables into</span>
<span class="highlight-comment">//  double[][] matrices and double[] vectors, respectively.</span>

<span class="highlight-comment">// If we would like to learn a linear regression model for this data, there are two possible</span>
<span class="highlight-comment">// ways depending on which aspect of the linear regression we are interested the most. If we</span>
<span class="highlight-comment">// are interested in interpreting the linear regression, performing hypothesis tests with the</span>
<span class="highlight-comment">// coefficients and performing an actual _linear regression analysis_, then we can use the</span>
<span class="highlight-comment">// MultipleLinearRegressionAnalysis class for this. If however we are only interested in using</span>
<span class="highlight-comment">// the learned model directly to predict new values for the dataset, then we could be using the</span>
<span class="highlight-comment">// MultipleLinearRegression and OrdinaryLeastSquares classes directly instead. </span>

<span class="highlight-comment">// This example deals with the former case. For the later, please see the documentation page</span>
<span class="highlight-comment">// for the MultipleLinearRegression class.</span>

<span class="highlight-comment">// We can create a new multiple linear analysis for the variables</span>
<span class="highlight-keyword">var</span> mlra = <span class="highlight-keyword">new</span> MultipleLinearRegressionAnalysis(intercept: <span class="highlight-keyword">true</span>)
{
    <span class="highlight-comment">// We can also inform the names of the new variables that have been created by the</span>
    <span class="highlight-comment">// codification filter. Those can help in the visualizing the analysis once it is </span>
    <span class="highlight-comment">// data-bound to a visual control such a Windows.Forms.DataGridView or WPF DataGrid:</span>

    Inputs = inputNames, <span class="highlight-comment">// will be { "Weather: Sunny", "Weather: Rain, "Weather: Cloudy", "Time (hours)" }</span>
    Output = outputName  <span class="highlight-comment">// will be "Revenue"</span>
};

<span class="highlight-comment">// To overcome linear dependency errors</span>
mlra.OrdinaryLeastSquares.IsRobust = <span class="highlight-keyword">true</span>;

<span class="highlight-comment">// Compute the analysis and obtain the estimated regression</span>
MultipleLinearRegression regression = mlra.Learn(inputs, outputs);

<span class="highlight-comment">// And then predict the label using</span>
<span class="highlight-keyword">double</span> predicted = mlra.Transform(inputs[<span class="highlight-number">0</span>]); <span class="highlight-comment">// result will be ~72.3</span>

<span class="highlight-comment">// Because we opted for doing a MultipleLinearRegressionAnalysis instead of a simple</span>
<span class="highlight-comment">// linear regression, we will have further information about the regression available:</span>
<span class="highlight-keyword">int</span> inputCount = mlra.NumberOfInputs;   <span class="highlight-comment">// should be 4</span>
<span class="highlight-keyword">int</span> outputCount = mlra.NumberOfOutputs; <span class="highlight-comment">// should be 1</span>
<span class="highlight-keyword">double</span> r2 = mlra.RSquared;              <span class="highlight-comment">// should be 0.12801838425195311</span>
AnovaSourceCollection a = mlra.Table;   <span class="highlight-comment">// ANOVA table (bind to a visual control for quick inspection)</span>
<span class="highlight-keyword">double</span>[][] h = mlra.InformationMatrix;  <span class="highlight-comment">// should contain Fisher's information matrix for the problem</span>
ZTest z = mlra.ZTest;                   <span class="highlight-comment">// should be 0 (p=0.999, non-significant)</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAACBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Filters.htm">Accord.Statistics.Filters Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Filters_Codification_1.htm">Accord.Statistics.Filters<span id="LST88F294E4_211"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_211?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Codification<span id="LST88F294E4_212"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_212?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST88F294E4_213"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_213?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Filters_Discretization_2.htm">Accord.Statistics.Filters<span id="LST88F294E4_214"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_214?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Discretization<span id="LST88F294E4_215"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_215?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TInput, TOutput<span id="LST88F294E4_216"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST88F294E4_216?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>