<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Precomputed Structure</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Precomputed structure" />
    <meta name="System.Keywords" content="Accord.Statistics.Kernels.Precomputed structure" />
    <meta name="System.Keywords" content="Precomputed structure, about Precomputed structure" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Kernels.Precomputed" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Kernels.Precomputed" />
    <meta name="Description" content="Precomputed Gram Matrix Kernel." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.Statistics.Kernels" />
    <meta name="file" content="T_Accord_Statistics_Kernels_Precomputed" />
    <meta name="guid" content="T_Accord_Statistics_Kernels_Precomputed" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_Statistics_Kernels.htm" title="Accord.Statistics.Kernels" tocid="N_Accord_Statistics_Kernels">Accord.Statistics.Kernels</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_Statistics_Kernels_Precomputed.htm" title="Precomputed Structure" tocid="T_Accord_Statistics_Kernels_Precomputed">Precomputed Structure</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Accord_Statistics_Kernels_Precomputed__ctor.htm" title="Precomputed Constructor " tocid="Overload_Accord_Statistics_Kernels_Precomputed__ctor">Precomputed Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_Statistics_Kernels_Precomputed.htm" title="Precomputed Properties" tocid="Properties_T_Accord_Statistics_Kernels_Precomputed">Precomputed Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_Statistics_Kernels_Precomputed.htm" title="Precomputed Methods" tocid="Methods_T_Accord_Statistics_Kernels_Precomputed">Precomputed Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>Precomputed Structure</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
              Precomputed Gram Matrix Kernel.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_Statistics_Kernels.htm">Accord.Statistics.Kernels</a><br />
    <strong>Assembly:</strong>
   Accord.Statistics (in Accord.Statistics.dll) Version: 3.6.4-alpha<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">struct</span> <span class="identifier">Precomputed</span> : <span class="identifier">IKernel</span>, 
	<span class="identifier">IKernel</span>&lt;<span class="identifier">double</span>[]&gt;, <span class="identifier">IKernel</span>&lt;<span class="identifier">int</span>&gt;, <span class="identifier">ICloneable</span></pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Structure</span> <span class="identifier">Precomputed</span>
	<span class="keyword">Implements</span> <span class="identifier">IKernel</span>, <span class="identifier">IKernel</span>(<span class="keyword">Of</span> <span class="identifier">Double</span>()), 
	<span class="identifier">IKernel</span>(<span class="keyword">Of</span> <span class="identifier">Integer</span>), <span class="identifier">ICloneable</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.Statistics/Kernels/Precomputed.cs" title="View the source code">View Source</a></div><p>The <span class="selflink">Precomputed</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Kernels_Precomputed__ctor.htm">Precomputed(<span id="LSTD1F082CF_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_0?cpp=array&lt;");</script>Double<span id="LSTD1F082CF_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_1?cpp=,2&gt;|cs=[,]|vb=(,)|nu=[,]|fs=[,]");</script>)</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Constructs a new Precomputed Matrix Kernel.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Kernels_Precomputed__ctor_1.htm">Precomputed(<span id="LSTD1F082CF_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_2?cpp=array&lt;");</script><span id="LSTD1F082CF_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_3?cpp=array&lt;");</script>Double<span id="LSTD1F082CF_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_4?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTD1F082CF_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_5?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Constructs a new Precomputed Matrix Kernel.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Kernels_Precomputed_Indices.htm">Indices</a></td><td><div class="summary">
            Gets a vector of indices that can be fed as the inputs of a learning
            algorithm. The learning algorithm will then use the indices to refer 
            to each element in the precomputed kernel matrix.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Kernels_Precomputed_Matrix.htm">Matrix</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Gets or sets the precomputed Gram matrix for this kernel.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Kernels_Precomputed_NumberOfBasisVectors.htm">NumberOfBasisVectors</a></td><td><div class="summary">
            Gets the dimension of the basis spawned by the initial training vectors.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Kernels_Precomputed_NumberOfSamples.htm">NumberOfSamples</a></td><td><div class="summary">
            Gets the current number of training samples.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_Statistics_Kernels_Precomputed_Values.htm">Values</a></td><td><div class="summary">
              Gets or sets the precomputed Gram matrix for this kernel.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Kernels_Precomputed_Clone.htm">Clone</a></td><td><div class="summary">
              Creates a new object that is a copy of the current instance.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Indicates whether this instance and a specified object are equal.</div> (Inherited from <span class="nolink">ValueType</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Kernels_Precomputed_Function.htm">Function(<span id="LSTD1F082CF_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_6?cpp=array&lt;");</script>Double<span id="LSTD1F082CF_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_7?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTD1F082CF_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_8?cpp=array&lt;");</script>Double<span id="LSTD1F082CF_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_9?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Kernel function.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_Statistics_Kernels_Precomputed_Function_1.htm">Function(Int32, Int32)</a></td><td><div class="summary">
            The kernel function.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Returns the hash code for this instance.</div> (Inherited from <span class="nolink">ValueType</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns the fully qualified type name of this instance.</div> (Inherited from <span class="nolink">ValueType</span>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Statistics_Tools_Distance.htm">Distance</a></td><td><div class="summary">
              Computes the kernel distance for a kernel function even if it doesn't
              implement the <a href="T_Accord_Math_Distances_IDistance.htm">IDistance</a> interface. Can be used to check
              the proper implementation of the distance function.
            </div> (Defined by <a href="T_Accord_Statistics_Tools.htm">Tools</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">Compares two objects for equality, performing an elementwise comparison if the elements are vectors or matrices.</div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LSTD1F082CF_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_10?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTD1F082CF_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD1F082CF_11?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
              The following example shows how to learn a multi-class SVM using
              a precomputed kernel matrix, obtained from a Polynomial kernel.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">            <span class="highlight-comment">// Let's say we have the following data to be classified</span>
            <span class="highlight-comment">// into three possible classes. Those are the samples:</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-keyword">double</span>[][] trainInputs =
            {
                <span class="highlight-comment">//               input         output</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0 </span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
            };

            <span class="highlight-keyword">int</span>[] trainOutputs = <span class="highlight-comment">// those are the training set class labels</span>
            {
                <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>,
                <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,
                <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>,
            };

            <span class="highlight-comment">// Let's chose a kernel function</span>
            Polynomial kernel = <span class="highlight-keyword">new</span> Polynomial(<span class="highlight-number">2</span>);

            <span class="highlight-comment">// Get the kernel matrix for the training set</span>
            <span class="highlight-keyword">double</span>[][] K = kernel.ToJagged(trainInputs);

            <span class="highlight-comment">// Create a pre-computed kernel</span>
            <span class="highlight-keyword">var</span> pre = <span class="highlight-keyword">new</span> Precomputed(K);

            <span class="highlight-comment">// Create a one-vs-one learning algorithm using SMO</span>
            <span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> MulticlassSupportVectorLearning&lt;Precomputed, <span class="highlight-keyword">int</span>&gt;()
            {
                Learner = (p) =&gt; <span class="highlight-keyword">new</span> SequentialMinimalOptimization&lt;Precomputed, <span class="highlight-keyword">int</span>&gt;()
                {
                    Kernel = pre
                }
            };

<span class="highlight-preprocessor">#if</span> DEBUG
            teacher.ParallelOptions.MaxDegreeOfParallelism = <span class="highlight-number">1</span>;
<span class="highlight-preprocessor">#endif</span>

            <span class="highlight-comment">// Learn a machine</span>
            <span class="highlight-keyword">var</span> machine = teacher.Learn(pre.Indices, trainOutputs);

            <span class="highlight-comment">// Compute the machine's prediction for the training set</span>
            <span class="highlight-keyword">int</span>[] trainPrediction = machine.Decide(pre.Indices);

            <span class="highlight-comment">// Evaluate prediction error for the training set using mean accuracy (mAcc)</span>
            <span class="highlight-keyword">double</span> trainingError = <span class="highlight-keyword">new</span> ZeroOneLoss(trainOutputs).Loss(trainPrediction);

            <span class="highlight-comment">// Now let's compute the machine's prediction for a test set</span>
            <span class="highlight-keyword">double</span>[][] testInputs = <span class="highlight-comment">// test-set inputs</span>
            {
                <span class="highlight-comment">//               input         output</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0 </span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
                <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
            };

            <span class="highlight-keyword">int</span>[] testOutputs = <span class="highlight-comment">// those are the test set class labels</span>
            {
                <span class="highlight-number">0</span>, <span class="highlight-number">0</span>,  <span class="highlight-number">1</span>,  <span class="highlight-number">2</span>,
            };

            <span class="highlight-comment">// Compute precomputed matrix between train and testing</span>
            pre.Values = kernel.ToJagged2(trainInputs, testInputs);

            <span class="highlight-comment">// Update the kernel</span>
            machine.Kernel = pre;

            <span class="highlight-comment">// Compute the machine's prediction for the test set</span>
            <span class="highlight-keyword">int</span>[] testPrediction = machine.Decide(pre.Indices);

            <span class="highlight-comment">// Evaluate prediction error for the training set using mean accuracy (mAcc)</span>
            <span class="highlight-keyword">double</span> testError = <span class="highlight-keyword">new</span> ZeroOneLoss(testOutputs).Loss(testPrediction);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABA");</script><p>
              The following example shows how to learn a simple binary SVM using
               a precomputed kernel matrix obtained from a Gaussian kernel.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// As an example, we will try to learn a decision machine </span>
<span class="highlight-comment">// that can replicate the "exclusive-or" logical function:</span>

<span class="highlight-keyword">double</span>[][] inputs =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// the XOR function takes two booleans</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// and computes their exclusive or: the</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// output is true only if the two booleans</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }  <span class="highlight-comment">// are different</span>
};

<span class="highlight-keyword">int</span>[] xor = <span class="highlight-comment">// this is the output of the xor function</span>
{
    <span class="highlight-number">0</span>, <span class="highlight-comment">// 0 xor 0 = 0 (inputs are equal)</span>
    <span class="highlight-number">1</span>, <span class="highlight-comment">// 0 xor 1 = 1 (inputs are different)</span>
    <span class="highlight-number">1</span>, <span class="highlight-comment">// 1 xor 0 = 1 (inputs are different)</span>
    <span class="highlight-number">0</span>, <span class="highlight-comment">// 1 xor 1 = 0 (inputs are equal)</span>
};

<span class="highlight-comment">// Let's use a Gaussian kernel</span>
<span class="highlight-keyword">var</span> kernel = <span class="highlight-keyword">new</span> Gaussian(<span class="highlight-number">0.1</span>);

<span class="highlight-comment">// Create a pre-computed Gaussian kernel matrix</span>
<span class="highlight-keyword">var</span> precomputed = <span class="highlight-keyword">new</span> Precomputed(kernel.ToJagged(inputs));

<span class="highlight-comment">// Now, we can create the sequential minimal optimization teacher</span>
<span class="highlight-keyword">var</span> learn = <span class="highlight-keyword">new</span> SequentialMinimalOptimization&lt;Precomputed, <span class="highlight-keyword">int</span>&gt;()
{
    Kernel = precomputed <span class="highlight-comment">// set the precomputed kernel we created</span>
};

<span class="highlight-comment">// And then we can obtain the SVM by using Learn</span>
<span class="highlight-keyword">var</span> svm = learn.Learn(precomputed.Indices, xor);

<span class="highlight-comment">// Finally, we can obtain the decisions predicted by the machine:</span>
<span class="highlight-keyword">bool</span>[] prediction = svm.Decide(precomputed.Indices);

<span class="highlight-comment">// We can also compute the machine prediction to new samples</span>
<span class="highlight-keyword">double</span>[][] sample =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }
};

<span class="highlight-comment">// Update the precomputed kernel with the new samples</span>
precomputed = <span class="highlight-keyword">new</span> Precomputed(kernel.ToJagged2(inputs, sample));

<span class="highlight-comment">// Update the SVM kernel</span>
svm.Kernel = precomputed;

<span class="highlight-comment">// Compute the predictions to the new samples</span>
<span class="highlight-keyword">bool</span>[] newPrediction = svm.Decide(precomputed.Indices);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Kernels.htm">Accord.Statistics.Kernels Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>