<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ID3Learning Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="ID3Learning class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning class" />
    <meta name="System.Keywords" content="ID3Learning class, about ID3Learning class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Description" content="ID3 (Iterative Dichotomizer 3) learning algorithm for Decision Trees." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.MachineLearning.DecisionTrees.Learning" />
    <meta name="file" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    <meta name="guid" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_MachineLearning_DecisionTrees_Learning.htm" title="Accord.MachineLearning.DecisionTrees.Learning" tocid="N_Accord_MachineLearning_DecisionTrees_Learning">Accord.MachineLearning.DecisionTrees.Learning</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm" title="ID3Learning Class" tocid="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning">ID3Learning Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning__ctor.htm" title="ID3Learning Constructor " tocid="Overload_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning__ctor">ID3Learning Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm" title="ID3Learning Properties" tocid="Properties_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning">ID3Learning Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm" title="ID3Learning Methods" tocid="Methods_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning">ID3Learning Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>ID3Learning Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
               ID3 (Iterative Dichotomizer 3) learning algorithm
               for <a href="T_Accord_MachineLearning_DecisionTrees_DecisionTree.htm">Decision Trees</a>.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LSTE0309904_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">Accord.MachineLearning<span id="LSTE0309904_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ParallelLearningBase</a><br />    <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">Accord.MachineLearning.DecisionTrees.Learning<span id="LSTE0309904_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>DecisionTreeLearningBase</a><br />      <span class="selflink">Accord.MachineLearning.DecisionTrees.Learning<span id="LSTE0309904_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ID3Learning</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning</a><br />
    <strong>Assembly:</strong>
   Accord.MachineLearning (in Accord.MachineLearning.dll) Version: 3.8.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ID3Learning</span> : <span class="identifier">DecisionTreeLearningBase</span>, 
	<span class="identifier">ISupervisedLearning</span>&lt;<span class="identifier">DecisionTree</span>, <span class="identifier">int</span>[], <span class="identifier">int</span>&gt;</pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ID3Learning</span>
	<span class="keyword">Inherits</span> <span class="identifier">DecisionTreeLearningBase</span>
	<span class="keyword">Implements</span> <span class="identifier">ISupervisedLearning</span>(<span class="keyword">Of</span> <span class="identifier">DecisionTree</span>, <span class="identifier">Integer</span>(), <span class="identifier">Integer</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.MachineLearning/DecisionTrees/Learning/ID3Learning.cs" title="View the source code">View Source</a></div><p>The <span class="selflink">ID3Learning</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning__ctor.htm">ID3Learning<span id="LSTE0309904_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_4?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
              Creates a new ID3 learning algorithm.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning__ctor_1.htm">ID3Learning(DecisionTree)</a></td><td><div class="summary">
              Creates a new ID3 learning algorithm.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning__ctor_2.htm">ID3Learning(<span id="LSTE0309904_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_5?cpp=array&lt;");</script>DecisionVariable<span id="LSTE0309904_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_6?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new ID3 learning algorithm.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_Attributes.htm">Attributes</a></td><td><div class="summary">
              Gets or sets the collection of attributes to 
              be processed by the induced decision tree.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protproperty.gif" alt="Protected property" title="Protected property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_AttributeUsageCount.htm">AttributeUsageCount</a></td><td><div class="summary">
              Gets how many times each attribute has already been used in the current path.
              In the original C4.5 and ID3 algorithms, attributes could be re-used only once,
              but in the framework implementation this behaviour can be adjusted by setting 
              the <a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_Join.htm">Join</a> property.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_Join.htm">Join</a></td><td><div class="summary">
              Gets or sets how many times one single variable can be integrated into the decision process. In the original
              ID3 algorithm, a variable can join only one time per decision path (path from the root to a leaf). If set to
              zero, a single variable can participate as many times as needed. Default is 1.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_MaxHeight.htm">MaxHeight</a></td><td><div class="summary">
              Gets or sets the maximum allowed height when learning a tree. If 
              set to zero, the tree can have an arbitrary length. Default is 0.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_MaxVariables.htm">MaxVariables</a></td><td><div class="summary">
              Gets or sets the maximum number of variables that
              can enter the tree. A value of zero indicates there
              is no limit. Default is 0 (there is no limit on the
              number of variables).
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_Model.htm">Model</a></td><td><div class="summary">
              Gets or sets the decision trees being learned.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_ParallelLearningBase_ParallelOptions.htm">ParallelOptions</a></td><td><div class="summary">
              Gets or sets the parallelization options for this algorithm.
            </div> (Inherited from <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">ParallelLearningBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning_Rejection.htm">Rejection</a></td><td><div class="summary">
              Gets or sets whether all nodes are obligated to provide 
              a true decision value. If set to false, some leaf nodes
              may contain <span class="code">null</span>. Default is false.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_ParallelLearningBase_Token.htm">Token</a></td><td><div class="summary">
            Gets or sets a cancellation token that can be used
            to cancel the algorithm while it is running.
            </div> (Inherited from <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">ParallelLearningBase</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_Add.htm">Add</a></td><td><div class="summary">
              Adds the specified variable to the list of <span class="nolink">Attribute</span>s.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning_ComputeError.htm">ComputeError</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Computes the prediction error for the tree
              over a given set of input and outputs.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase_GetEnumerator.htm">GetEnumerator</a></td><td><div class="summary">
            Returns an enumerator that iterates through the collection.
            </div> (Inherited from <a href="T_Accord_MachineLearning_DecisionTrees_Learning_DecisionTreeLearningBase.htm">DecisionTreeLearningBase</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning_Learn.htm">Learn</a></td><td><div class="summary">
              Learns a model that can map the given inputs to the given outputs.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning_Run.htm">Run</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Runs the learning algorithm, creating a decision
              tree modeling the given inputs and outputs.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">
                Compares two objects for equality, performing an elementwise 
                comparison if the elements are vectors or matrices.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To.htm">To(Type)</a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LSTE0309904_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_7?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTE0309904_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_8?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LSTE0309904_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTE0309904_9?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
               References:
               <ul><li>
                   Quinlan, J. R 1986. Induction of Decision Trees.
                   Mach. Learn. 1, 1 (Mar. 1986), 81-106.</li><li>
                   Mitchell, T. M. Machine Learning. McGraw-Hill, 1997. pp. 55-58. </li><li><a href="http://en.wikipedia.org/wiki/ID3_algorithm">
                   Wikipedia, the free encyclopedia. ID3 algorithm. Available on 
                   http://en.wikipedia.org/wiki/ID3_algorithm </a></li></ul></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
               This example shows the simplest way to induce a decision tree with discrete variables.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACDBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACDBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// In this example, we will learn a decision tree directly from integer</span>
<span class="highlight-comment">// matrices that define the inputs and outputs of our learning problem.</span>

<span class="highlight-keyword">int</span>[][] inputs =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span> },
};

<span class="highlight-keyword">int</span>[] outputs = <span class="highlight-comment">// xor between inputs[0] and inputs[1]</span>
{
    <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>
};

<span class="highlight-comment">// Create an ID3 learning algorithm</span>
ID3Learning teacher = <span class="highlight-keyword">new</span> ID3Learning();

<span class="highlight-comment">// Learn a decision tree for the XOR problem</span>
<span class="highlight-keyword">var</span> tree = teacher.Learn(inputs, outputs);

<span class="highlight-comment">// Compute the error in the learning</span>
<span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(tree.Decide(inputs));

<span class="highlight-comment">// The tree can now be queried for new examples:</span>
<span class="highlight-keyword">int</span>[] predicted = tree.Decide(inputs); <span class="highlight-comment">// should be { 0, 1, 1, 0 }</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACDBA");</script><p>
               This example shows a common textbook example, and how to induce a decision tree using a 
               <a href="T_Accord_Statistics_Filters_Codification.htm">codebook</a> to convert string (text) variables into discrete symbols.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAADBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAADBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAADBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// In this example, we will be using the famous Play Tennis example by Tom Mitchell (1998).</span>
<span class="highlight-comment">// In Mitchell's example, one would like to infer if a person would play tennis or not</span>
<span class="highlight-comment">// based solely on four input variables. Those variables are all categorical, meaning that</span>
<span class="highlight-comment">// there is no order between the possible values for the variable (i.e. there is no order</span>
<span class="highlight-comment">// relationship between Sunny and Rain, one is not bigger nor smaller than the other, but are </span>
<span class="highlight-comment">// just distinct). Moreover, the rows, or instances presented above represent days on which the</span>
<span class="highlight-comment">// behavior of the person has been registered and annotated, pretty much building our set of </span>
<span class="highlight-comment">// observation instances for learning:</span>

<span class="highlight-comment">// Note: this example uses DataTables to represent the input data , but this is not required.</span>
DataTable data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Mitchell's Tennis Example"</span>);

data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>, <span class="highlight-literal">"PlayTennis"</span>);
data.Rows.Add(<span class="highlight-literal">"D1"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"No"</span>);
data.Rows.Add(<span class="highlight-literal">"D2"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);
data.Rows.Add(<span class="highlight-literal">"D3"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D4"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D5"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D6"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);
data.Rows.Add(<span class="highlight-literal">"D7"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D8"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"No"</span>);
data.Rows.Add(<span class="highlight-literal">"D9"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Cool"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D10"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D11"</span>, <span class="highlight-literal">"Sunny"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D12"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D13"</span>, <span class="highlight-literal">"Overcast"</span>, <span class="highlight-literal">"Hot"</span>, <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Weak"</span>, <span class="highlight-literal">"Yes"</span>);
data.Rows.Add(<span class="highlight-literal">"D14"</span>, <span class="highlight-literal">"Rain"</span>, <span class="highlight-literal">"Mild"</span>, <span class="highlight-literal">"High"</span>, <span class="highlight-literal">"Strong"</span>, <span class="highlight-literal">"No"</span>);

<span class="highlight-comment">// In order to try to learn a decision tree, we will first convert this problem to a more simpler</span>
<span class="highlight-comment">// representation. Since all variables are categories, it does not matter if they are represented</span>
<span class="highlight-comment">// as strings, or numbers, since both are just symbols for the event they represent. Since numbers</span>
<span class="highlight-comment">// are more easily representable than text string, we will convert the problem to use a discrete </span>
<span class="highlight-comment">// alphabet through the use of a Accord.Statistics.Filters.Codification codebook.&lt;/para&gt;</span>

<span class="highlight-comment">// A codebook effectively transforms any distinct possible value for a variable into an integer </span>
<span class="highlight-comment">// symbol. For example, “Sunny” could as well be represented by the integer label 0, “Overcast” </span>
<span class="highlight-comment">// by “1”, Rain by “2”, and the same goes by for the other variables. So:&lt;/para&gt;</span>

<span class="highlight-comment">// Create a new codification codebook to </span>
<span class="highlight-comment">// convert strings into integer symbols</span>
<span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification(data);

<span class="highlight-comment">// Translate our training data into integer symbols using our codebook:</span>
DataTable symbols = codebook.Apply(data);
<span class="highlight-keyword">int</span>[][] inputs = symbols.ToArray&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>);
<span class="highlight-keyword">int</span>[] outputs = symbols.ToArray&lt;<span class="highlight-keyword">int</span>&gt;(<span class="highlight-literal">"PlayTennis"</span>);

<span class="highlight-comment">// For this task, in which we have only categorical variables, the simplest choice </span>
<span class="highlight-comment">// to induce a decision tree is to use the ID3 algorithm by Quinlan. Let’s do it:</span>

<span class="highlight-comment">// Create a teacher ID3 algorithm</span>
<span class="highlight-keyword">var</span> id3learning = <span class="highlight-keyword">new</span> ID3Learning()
{
    <span class="highlight-comment">// Now that we already have our learning input/ouput pairs, we should specify our</span>
    <span class="highlight-comment">// decision tree. We will be trying to build a tree to predict the last column, entitled</span>
    <span class="highlight-comment">// “PlayTennis”. For this, we will be using the “Outlook”, “Temperature”, “Humidity” and</span>
    <span class="highlight-comment">// “Wind” as predictors (variables which will we will use for our decision). Since those</span>
    <span class="highlight-comment">// are categorical, we must specify, at the moment of creation of our tree, the</span>
    <span class="highlight-comment">// characteristics of each of those variables. So:</span>

    <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Outlook"</span>,     <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Sunny, overcast, rain)</span>
    <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Temperature"</span>, <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Hot, mild, cool)  </span>
    <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Humidity"</span>,    <span class="highlight-number">2</span>), <span class="highlight-comment">// 2 possible values (High, normal)    </span>
    <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Wind"</span>,        <span class="highlight-number">2</span>)  <span class="highlight-comment">// 2 possible values (Weak, strong) </span>

    <span class="highlight-comment">// Note: It is also possible to create a DecisionVariable[] from a codebook:</span>
    <span class="highlight-comment">// DecisionVariable[] attributes = DecisionVariable.FromCodebook(codebook);</span>
};

<span class="highlight-comment">// Learn the training instances!</span>
DecisionTree tree = id3learning.Learn(inputs, outputs);

<span class="highlight-comment">// Compute the training error when predicting training instances</span>
<span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(tree.Decide(inputs));

<span class="highlight-comment">// The tree can now be queried for new examples through </span>
<span class="highlight-comment">// its decide method. For example, we can create a query</span>

<span class="highlight-keyword">int</span>[] query = codebook.Transform(<span class="highlight-keyword">new</span>[,]
{
    { <span class="highlight-literal">"Outlook"</span>,     <span class="highlight-literal">"Sunny"</span>  },
    { <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Hot"</span>    },
    { <span class="highlight-literal">"Humidity"</span>,    <span class="highlight-literal">"High"</span>   },
    { <span class="highlight-literal">"Wind"</span>,        <span class="highlight-literal">"Strong"</span> }
});

<span class="highlight-comment">// And then predict the label using</span>
<span class="highlight-keyword">int</span> predicted = tree.Decide(query);  <span class="highlight-comment">// result will be 0</span>

<span class="highlight-comment">// We can translate it back to strings using</span>
<span class="highlight-keyword">string</span> answer = codebook.Revert(<span class="highlight-literal">"PlayTennis"</span>, predicted); <span class="highlight-comment">// Answer will be: "No"</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAADBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>