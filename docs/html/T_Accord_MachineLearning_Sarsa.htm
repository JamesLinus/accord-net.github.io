<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Sarsa Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Sarsa class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.Sarsa class" />
    <meta name="System.Keywords" content="Sarsa class, about Sarsa class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.Sarsa" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.Sarsa" />
    <meta name="Description" content="Sarsa learning algorithm." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.MachineLearning" />
    <meta name="file" content="T_Accord_MachineLearning_Sarsa" />
    <meta name="guid" content="T_Accord_MachineLearning_Sarsa" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_MachineLearning.htm" title="Accord.MachineLearning" tocid="N_Accord_MachineLearning">Accord.MachineLearning</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_MachineLearning_Sarsa.htm" title="Sarsa Class" tocid="T_Accord_MachineLearning_Sarsa">Sarsa Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Accord_MachineLearning_Sarsa__ctor.htm" title="Sarsa Constructor " tocid="Overload_Accord_MachineLearning_Sarsa__ctor">Sarsa Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_MachineLearning_Sarsa.htm" title="Sarsa Properties" tocid="Properties_T_Accord_MachineLearning_Sarsa">Sarsa Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_MachineLearning_Sarsa.htm" title="Sarsa Methods" tocid="Methods_T_Accord_MachineLearning_Sarsa">Sarsa Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>Sarsa Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
            Sarsa learning algorithm.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LSTDBDD2DC1_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <span class="selflink">Accord.MachineLearning<span id="LSTDBDD2DC1_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Sarsa</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_MachineLearning.htm">Accord.MachineLearning</a><br />
    <strong>Assembly:</strong>
   Accord.MachineLearning (in Accord.MachineLearning.dll) Version: 3.8.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Sarsa</span></pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">Sarsa</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.MachineLearning/Sarsa.cs" title="View the source code">View Source</a></div><p>The <span class="selflink">Sarsa</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Sarsa__ctor.htm">Sarsa(Int32, Int32, IExplorationPolicy)</a></td><td><div class="summary">
            Initializes a new instance of the <span class="selflink">Sarsa</span> class.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Sarsa__ctor_1.htm">Sarsa(Int32, Int32, IExplorationPolicy, Boolean)</a></td><td><div class="summary">
            Initializes a new instance of the <span class="selflink">Sarsa</span> class.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Sarsa_ActionsCount.htm">ActionsCount</a></td><td><div class="summary">
            Amount of possible actions.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Sarsa_DiscountFactor.htm">DiscountFactor</a></td><td><div class="summary">
            Discount factor, [0, 1].
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Sarsa_ExplorationPolicy.htm">ExplorationPolicy</a></td><td><div class="summary">
            Exploration policy.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Sarsa_LearningRate.htm">LearningRate</a></td><td><div class="summary">
            Learning rate, [0, 1].
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Sarsa_StatesCount.htm">StatesCount</a></td><td><div class="summary">
            Amount of possible states.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Sarsa_GetAction.htm">GetAction</a></td><td><div class="summary">
            Get next action from the specified state.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Sarsa_UpdateState.htm">UpdateState(Int32, Int32, Double)</a></td><td><div class="summary">
            Update Q-function's value for the previous state-action pair.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Sarsa_UpdateState_1.htm">UpdateState(Int32, Int32, Double, Int32, Int32)</a></td><td><div class="summary">
            Update Q-function's value for the previous state-action pair.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">
                Compares two objects for equality, performing an elementwise 
                comparison if the elements are vectors or matrices.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To.htm">To(Type)</a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LSTDBDD2DC1_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTDBDD2DC1_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LSTDBDD2DC1_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_4?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection">The class provides implementation of Sarsa algorithm, known as
            on-policy Temporal Difference control.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
              The following example shows how to learn a model using reinforcement learning through the
              Sarsa algorithm. The following code has been inherited from the AForge.NET Framework,
              and has not been modified ever since. If you have better ideas on how to improve its 
              interface, please share it in the project's issue tracker at 
              <a href="https://github.com/accord-net/framework/issues">https://github.com/accord-net/framework/issues</a>.
              If you would like, and if your ideas are feasible and encouraging enough, you can be named an
              official contributor of the project. If you would like, you could opt to "inherit" the reinforcement learning 
              portion of the project such that you could be free to commit, modify and, more importantly, authorship
              those modules directly from your own GitHub account without having to wait for Pull Request approvals.
              You can be listed as an official author of the Accord.NET Framework, making it possible to list the
              creation or shared authorship of the reinforcement learning project in your CV.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Fix the random number generator</span>
Accord.Math.Random.Generator.Seed = <span class="highlight-number">0</span>;

<span class="highlight-comment">// In this example, we will be using the Sarsa algorithm</span>
<span class="highlight-comment">// to make a robot learn how to navigate a map. The map</span>
<span class="highlight-comment">// is shown below, where a 1 denotes a wall and 0 denotes</span>
<span class="highlight-comment">// areas where the robot can navigate:</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">int</span>[,] map =
{
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
    { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> },
};

<span class="highlight-comment">// Now, we define the initial and target points from which the</span>
<span class="highlight-comment">// robot will be spawn and where it should go, respectively:</span>
<span class="highlight-keyword">int</span> agentStartX = <span class="highlight-number">1</span>;
<span class="highlight-keyword">int</span> agentStartY = <span class="highlight-number">4</span>;

<span class="highlight-keyword">int</span> agentStopX = <span class="highlight-number">7</span>;
<span class="highlight-keyword">int</span> agentStopY = <span class="highlight-number">4</span>;

<span class="highlight-comment">// The robot is able to sense the environment though 8 sensors</span>
<span class="highlight-comment">// that capture whether the robot is near a wall or not. Based</span>
<span class="highlight-comment">// on the robot's current location, the sensors will return an</span>
<span class="highlight-comment">// integer number representing which sensors have detected walls</span>

Func&lt;<span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>&gt; getState = (<span class="highlight-keyword">int</span> x, <span class="highlight-keyword">int</span> y) =&gt;
{
    <span class="highlight-keyword">int</span> c1 = (map[y - <span class="highlight-number">1</span>, x - <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c2 = (map[y - <span class="highlight-number">1</span>, x + <span class="highlight-number">0</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c3 = (map[y - <span class="highlight-number">1</span>, x + <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c4 = (map[y + <span class="highlight-number">0</span>, x + <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c5 = (map[y + <span class="highlight-number">1</span>, x + <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c6 = (map[y + <span class="highlight-number">1</span>, x + <span class="highlight-number">0</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c7 = (map[y + <span class="highlight-number">1</span>, x - <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
    <span class="highlight-keyword">int</span> c8 = (map[y + <span class="highlight-number">0</span>, x - <span class="highlight-number">1</span>] != <span class="highlight-number">0</span>) ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;

    <span class="highlight-keyword">return</span> c1 | (c2 &lt;&lt; <span class="highlight-number">1</span>) | (c3 &lt;&lt; <span class="highlight-number">2</span>) | (c4 &lt;&lt; <span class="highlight-number">3</span>) | (c5 &lt;&lt; <span class="highlight-number">4</span>) | (c6 &lt;&lt; <span class="highlight-number">5</span>) | (c7 &lt;&lt; <span class="highlight-number">6</span>) | (c8 &lt;&lt; <span class="highlight-number">7</span>);
};

<span class="highlight-comment">// The actions are the possible directions the robot can go:</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">//   - case 0: go to north (up)</span>
<span class="highlight-comment">//   - case 1: go to east (right)</span>
<span class="highlight-comment">//   - case 2: go to south (down)</span>
<span class="highlight-comment">//   - case 3: go to west (left)</span>
<span class="highlight-comment">// </span>

<span class="highlight-keyword">int</span> learningIterations = <span class="highlight-number">1000</span>;
<span class="highlight-keyword">double</span> explorationRate = <span class="highlight-number">0.5</span>;
<span class="highlight-keyword">double</span> learningRate = <span class="highlight-number">0.5</span>;

<span class="highlight-keyword">double</span> moveReward = <span class="highlight-number">0</span>;
<span class="highlight-keyword">double</span> wallReward = <span class="highlight-number">-1</span>;
<span class="highlight-keyword">double</span> goalReward = <span class="highlight-number">1</span>;

<span class="highlight-comment">// The function below specifies how the robot should perform an action given its </span>
<span class="highlight-comment">// current position and an action number. This will cause the robot to update its </span>
<span class="highlight-comment">// current X and Y locations given the direction (above) it was instructed to go:</span>
Func&lt;<span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>, Tuple&lt;<span class="highlight-keyword">double</span>, <span class="highlight-keyword">int</span>, <span class="highlight-keyword">int</span>&gt;&gt; doAction = (<span class="highlight-keyword">int</span> currentX, <span class="highlight-keyword">int</span> currentY, <span class="highlight-keyword">int</span> action) =&gt;
{
    <span class="highlight-comment">// default reward is equal to moving reward</span>
    <span class="highlight-keyword">double</span> reward = moveReward;

    <span class="highlight-comment">// moving direction</span>
    <span class="highlight-keyword">int</span> dx = <span class="highlight-number">0</span>, dy = <span class="highlight-number">0</span>;

    <span class="highlight-keyword">switch</span> (action)
    {
        <span class="highlight-keyword">case</span> <span class="highlight-number">0</span>:         <span class="highlight-comment">// go to north (up)</span>
            dy = <span class="highlight-number">-1</span>;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> <span class="highlight-number">1</span>:         <span class="highlight-comment">// go to east (right)</span>
            dx = <span class="highlight-number">1</span>;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> <span class="highlight-number">2</span>:         <span class="highlight-comment">// go to south (down)</span>
            dy = <span class="highlight-number">1</span>;
            <span class="highlight-keyword">break</span>;
        <span class="highlight-keyword">case</span> <span class="highlight-number">3</span>:         <span class="highlight-comment">// go to west (left)</span>
            dx = <span class="highlight-number">-1</span>;
            <span class="highlight-keyword">break</span>;
    }

    <span class="highlight-keyword">int</span> newX = currentX + dx;
    <span class="highlight-keyword">int</span> newY = currentY + dy;

    <span class="highlight-comment">// check new agent's coordinates</span>
    <span class="highlight-keyword">if</span> ((map[newY, newX] != <span class="highlight-number">0</span>) || (newX &lt; <span class="highlight-number">0</span>) || (newX &gt;= map.Columns()) || (newY &lt; <span class="highlight-number">0</span>) || (newY &gt;= map.Rows()))
    {
        <span class="highlight-comment">// we found a wall or got outside of the world</span>
        reward = wallReward;
    }
    <span class="highlight-keyword">else</span>
    {
        currentX = newX;
        currentY = newY;

        <span class="highlight-comment">// check if we found the goal</span>
        <span class="highlight-keyword">if</span> ((currentX == agentStopX) &amp;&amp; (currentY == agentStopY))
            reward = goalReward;
    }

    <span class="highlight-keyword">return</span> Tuple.Create(reward, currentX, currentY);
};


<span class="highlight-comment">// After defining all those functions, we create a new Sarsa algorithm:</span>
<span class="highlight-keyword">var</span> explorationPolicy = <span class="highlight-keyword">new</span> EpsilonGreedyExploration(explorationRate);
<span class="highlight-keyword">var</span> tabuPolicy = <span class="highlight-keyword">new</span> TabuSearchExploration(<span class="highlight-number">4</span>, explorationPolicy);
<span class="highlight-keyword">var</span> sarsa = <span class="highlight-keyword">new</span> Sarsa(<span class="highlight-number">256</span>, <span class="highlight-number">4</span>, tabuPolicy);

<span class="highlight-comment">// curent coordinates of the agent</span>
<span class="highlight-keyword">int</span> agentCurrentX = <span class="highlight-number">-1</span>;
<span class="highlight-keyword">int</span> agentCurrentY = <span class="highlight-number">-1</span>;

<span class="highlight-keyword">bool</span> needToStop = <span class="highlight-keyword">false</span>;
<span class="highlight-keyword">int</span> iteration = <span class="highlight-number">0</span>;

<span class="highlight-comment">// loop</span>
<span class="highlight-keyword">while</span> ((!needToStop) &amp;&amp; (iteration &lt; learningIterations))
{
    <span class="highlight-comment">// set exploration rate for this iteration</span>
    explorationPolicy.Epsilon = explorationRate - ((<span class="highlight-keyword">double</span>)iteration / learningIterations) * explorationRate;

    <span class="highlight-comment">// set learning rate for this iteration</span>
    sarsa.LearningRate = learningRate - ((<span class="highlight-keyword">double</span>)iteration / learningIterations) * learningRate;

    <span class="highlight-comment">// clear tabu list</span>
    tabuPolicy.ResetTabuList();

    <span class="highlight-comment">// reset agent's coordinates to the starting position</span>
    agentCurrentX = agentStartX;
    agentCurrentY = agentStartY;

    <span class="highlight-comment">// steps performed by agent to get to the goal</span>
    <span class="highlight-keyword">int</span> steps = <span class="highlight-number">1</span>;

    <span class="highlight-comment">// previous state and action</span>
    <span class="highlight-keyword">int</span> previousState = getState(agentCurrentX, agentCurrentY);
    <span class="highlight-keyword">int</span> previousAction = sarsa.GetAction(previousState);

    <span class="highlight-comment">// update agent's current position and get his reward</span>
    <span class="highlight-keyword">var</span> r = doAction(agentCurrentX, agentCurrentY, previousAction);
    <span class="highlight-keyword">double</span> reward = r.Item1;
    agentCurrentX = r.Item2;
    agentCurrentY = r.Item3;

    <span class="highlight-keyword">while</span> ((!needToStop) &amp;&amp; ((agentCurrentX != agentStopX) || (agentCurrentY != agentStopY)))
    {
        steps++;

        <span class="highlight-comment">// set tabu action</span>
        tabuPolicy.SetTabuAction((previousAction + <span class="highlight-number">2</span>) % <span class="highlight-number">4</span>, <span class="highlight-number">1</span>);

        <span class="highlight-comment">// get agent's next state</span>
        <span class="highlight-keyword">int</span> nextState = getState(agentCurrentX, agentCurrentY);

        <span class="highlight-comment">// get agent's next action</span>
        <span class="highlight-keyword">int</span> nextAction = sarsa.GetAction(nextState);

        <span class="highlight-comment">// do learning of the agent - update his Q-function</span>
        sarsa.UpdateState(previousState, previousAction, reward, nextState, nextAction);

        <span class="highlight-comment">// update agent's new position and get his reward</span>
        r = doAction(agentCurrentX, agentCurrentY, nextAction);
        reward = r.Item1;
        agentCurrentX = r.Item2;
        agentCurrentY = r.Item3;

        previousState = nextState;
        previousAction = nextAction;
    }

    <span class="highlight-keyword">if</span> (!needToStop)
    {
        <span class="highlight-comment">// update Q-function if terminal state was reached</span>
        sarsa.UpdateState(previousState, previousAction, reward);
    }

    iteration++;
}

<span class="highlight-comment">// The end position for the robot will be (7, 4):</span>
<span class="highlight-keyword">int</span> finalPosX = agentCurrentX; <span class="highlight-comment">// 7</span>
<span class="highlight-keyword">int</span> finalPosY = agentCurrentY; <span class="highlight-comment">// 4;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning.htm">Accord.MachineLearning Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_QLearning.htm">Accord.MachineLearning<span id="LSTDBDD2DC1_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTDBDD2DC1_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>QLearning</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>