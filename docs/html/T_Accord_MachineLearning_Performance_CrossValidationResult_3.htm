<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>CrossValidationResult(TModel, TInput, TOutput) Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="CrossValidationResult%3CTModel%2C TInput%2C TOutput%3E class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.Performance.CrossValidationResult%3CTModel%2C TInput%2C TOutput%3E class" />
    <meta name="System.Keywords" content="CrossValidationResult%3CTModel%2C TInput%2C TOutput%3E class, about CrossValidationResult%3CTModel%2C TInput%2C TOutput%3E class" />
    <meta name="System.Keywords" content="CrossValidationResult(Of TModel%2C TInput%2C TOutput) class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.Performance.CrossValidationResult(Of TModel%2C TInput%2C TOutput) class" />
    <meta name="System.Keywords" content="CrossValidationResult(Of TModel%2C TInput%2C TOutput) class, about CrossValidationResult(Of TModel%2C TInput%2C TOutput) class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.Performance.CrossValidationResult`3" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.Performance.CrossValidationResult`3" />
    <meta name="Description" content="Class for representing results acquired through a k-fold cross-validation analysis." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.MachineLearning.Performance" />
    <meta name="file" content="T_Accord_MachineLearning_Performance_CrossValidationResult_3" />
    <meta name="guid" content="T_Accord_MachineLearning_Performance_CrossValidationResult_3" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_MachineLearning_Performance.htm" title="Accord.MachineLearning.Performance" tocid="N_Accord_MachineLearning_Performance">Accord.MachineLearning.Performance</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_MachineLearning_Performance_CrossValidationResult_3.htm" title="CrossValidationResult(TModel, TInput, TOutput) Class" tocid="T_Accord_MachineLearning_Performance_CrossValidationResult_3">CrossValidationResult(TModel, TInput, TOutput) Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="M_Accord_MachineLearning_Performance_CrossValidationResult_3__ctor.htm" title="CrossValidationResult(TModel, TInput, TOutput) Constructor " tocid="M_Accord_MachineLearning_Performance_CrossValidationResult_3__ctor">CrossValidationResult(TModel, TInput, TOutput) Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_MachineLearning_Performance_CrossValidationResult_3.htm" title="CrossValidationResult(TModel, TInput, TOutput) Properties" tocid="Properties_T_Accord_MachineLearning_Performance_CrossValidationResult_3">CrossValidationResult(TModel, TInput, TOutput) Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_MachineLearning_Performance_CrossValidationResult_3.htm" title="CrossValidationResult(TModel, TInput, TOutput) Methods" tocid="Methods_T_Accord_MachineLearning_Performance_CrossValidationResult_3">CrossValidationResult(TModel, TInput, TOutput) Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>CrossValidationResult<span id="LST5EBD62A0_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><span class="typeparameter">TModel</span>, <span class="typeparameter">TInput</span>, <span class="typeparameter">TOutput</span><span id="LST5EBD62A0_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script> Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
              Class for representing results acquired through a 
              <a href="T_Accord_MachineLearning_Performance_CrossValidation_3.htm">k-fold cross-validation analysis</a>.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LST5EBD62A0_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <a href="T_Accord_MachineLearning_Performance_TrainValSplit_1.htm">Accord.MachineLearning.Performance<span id="LST5EBD62A0_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TrainValSplit</a><span id="LST5EBD62A0_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_4?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_Accord_MachineLearning_CrossValidationStatistics.htm">CrossValidationStatistics</a><span id="LST5EBD62A0_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_5?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />    <span class="selflink">Accord.MachineLearning.Performance<span id="LST5EBD62A0_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CrossValidationResult<span id="LST5EBD62A0_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_7?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TModel, TInput, TOutput<span id="LST5EBD62A0_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_8?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span><br />      <a href="T_Accord_MachineLearning_Performance_BootstrapResult_3.htm">Accord.MachineLearning.Performance<span id="LST5EBD62A0_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BootstrapResult<span id="LST5EBD62A0_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_10?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TModel, TInput, TOutput<span id="LST5EBD62A0_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_11?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_MachineLearning_Performance.htm">Accord.MachineLearning.Performance</a><br />
    <strong>Assembly:</strong>
   Accord.MachineLearning (in Accord.MachineLearning.dll) Version: 3.8.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CrossValidationResult</span>&lt;TModel, TInput, TOutput&gt; : <span class="identifier">TrainValSplit</span>&lt;<span class="identifier">CrossValidationStatistics</span>&gt;, 
	<span class="identifier">ITransform</span>&lt;TInput, TOutput&gt;, <span class="identifier">ICovariantTransform</span>&lt;TInput, TOutput&gt;, <span class="identifier">ITransform</span>
<span class="keyword">where</span> TModel : <span class="keyword">class</span>, <span class="identifier">Object</span>, <span class="identifier">ITransform</span>&lt;TInput, TOutput&gt;
</pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">CrossValidationResult</span>(<span class="keyword">Of</span> TModel <span class="keyword">As</span> {<span class="keyword">Class</span>, <span class="identifier">Object</span>, <span class="identifier">ITransform</span>(<span class="keyword">Of</span> TInput, TOutput)}, TInput, TOutput)
	<span class="keyword">Inherits</span> <span class="identifier">TrainValSplit</span>(<span class="keyword">Of</span> <span class="identifier">CrossValidationStatistics</span>)
	<span class="keyword">Implements</span> <span class="identifier">ITransform</span>(<span class="keyword">Of</span> TInput, TOutput), <span class="identifier">ICovariantTransform</span>(<span class="keyword">Of</span> TInput, TOutput), 
	<span class="identifier">ITransform</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.MachineLearning/Performance/CrossValidation/New/CrossValidationResult%603.cs" title="View the source code">View Source</a><h4 class="subHeading">Type Parameters</h4><dl><dt><span class="parameter">TModel</span></dt><dd>The type of the machine learning model.</dd><dt><span class="parameter">TInput</span></dt><dd>The type of the input data.</dd><dt><span class="parameter">TOutput</span></dt><dd>The type of the output data or labels.</dd></dl></div><p>The <span class="selflink">CrossValidationResult<span id="LST5EBD62A0_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_12?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TModel, TInput, TOutput<span id="LST5EBD62A0_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_13?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Performance_CrossValidationResult_3__ctor.htm">CrossValidationResult<span id="LST5EBD62A0_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_14?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TModel, TInput, TOutput<span id="LST5EBD62A0_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_15?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary">
              Initializes a new instance of the <a href="T_Accord_MachineLearning_CrossValidationResult_1.htm">CrossValidationResult<span id="LST5EBD62A0_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_16?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TModel<span id="LST5EBD62A0_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_17?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> class.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_AverageNumberOfSamples.htm">AverageNumberOfSamples</a></td><td><div class="summary">
              Gets the average number of data samples in 
              each cross-validation fold of the data set.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_CombineMethod.htm">CombineMethod</a></td><td><div class="summary">
              Gets or sets the method used to combine the scores of different classifiers. 
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_Models.htm">Models</a></td><td><div class="summary">
              Gets the models created for each fold of the cross validation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_NumberOfInputs.htm">NumberOfInputs</a></td><td><div class="summary">
            Gets the number of inputs accepted by the model.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_NumberOfOutputs.htm">NumberOfOutputs</a></td><td><div class="summary">
            Gets the number of outputs generated by the model.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_NumberOfSamples.htm">NumberOfSamples</a></td><td><div class="summary">
              Gets the total number of data samples in the entire data set.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_CrossValidationResult_3_Tag.htm">Tag</a></td><td><div class="summary">
              Gets or sets a tag for user-defined information.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_TrainValSplit_1_Training.htm">Training</a></td><td><div class="summary">
              Gets or sets the training split.
            </div> (Inherited from <a href="T_Accord_MachineLearning_Performance_TrainValSplit_1.htm">TrainValSplit<span id="LST5EBD62A0_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_18?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST5EBD62A0_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_19?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_Performance_TrainValSplit_1_Validation.htm">Validation</a></td><td><div class="summary">
              Gets or sets the validation split.
            </div> (Inherited from <a href="T_Accord_MachineLearning_Performance_TrainValSplit_1.htm">TrainValSplit<span id="LST5EBD62A0_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_20?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST5EBD62A0_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_21?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Performance_TrainValSplit_1_GetEnumerator.htm">GetEnumerator</a></td><td><div class="summary">
            Returns an enumerator that iterates through the collection.
            </div> (Inherited from <a href="T_Accord_MachineLearning_Performance_TrainValSplit_1.htm">TrainValSplit<span id="LST5EBD62A0_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_22?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST5EBD62A0_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_23?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Performance_CrossValidationResult_3_Transform.htm">Transform(TInput)</a></td><td><div class="summary">
            Applies the transformation to an input, producing an associated output.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Performance_CrossValidationResult_3_Transform_1.htm">Transform(<span id="LST5EBD62A0_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_24?cpp=array&lt;");</script>TInput<span id="LST5EBD62A0_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_25?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Applies the transformation to a set of input vectors,
            producing an associated set of output vectors.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_Performance_CrossValidationResult_3_Transform_2.htm">Transform(<span id="LST5EBD62A0_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_26?cpp=array&lt;");</script>TInput<span id="LST5EBD62A0_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_27?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LST5EBD62A0_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_28?cpp=array&lt;");</script>TOutput<span id="LST5EBD62A0_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_29?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
            Applies the transformation to a set of input vectors,
            producing an associated set of output vectors.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">
                Compares two objects for equality, performing an elementwise 
                comparison if the elements are vectors or matrices.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To.htm">To(Type)</a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LST5EBD62A0_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_30?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST5EBD62A0_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_31?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><span id="LST5EBD62A0_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5EBD62A0_32?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td>Overloaded.  <div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID7RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Ensure results are reproducible</span>
Accord.Math.Random.Generator.Seed = <span class="highlight-number">0</span>;

<span class="highlight-comment">// This is a sample code on how to use Cross-Validation</span>
<span class="highlight-comment">// to assess the performance of Support Vector Machines.</span>

<span class="highlight-comment">// Consider the example binary data. We will be trying</span>
<span class="highlight-comment">// to learn a XOR problem and see how well does SVMs</span>
<span class="highlight-comment">// perform on this data.</span>

<span class="highlight-keyword">double</span>[][] data =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>,  <span class="highlight-number">1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>,  <span class="highlight-number">1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>,  <span class="highlight-number">1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-1</span>,  <span class="highlight-number">1</span> }, <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span> },
};

<span class="highlight-keyword">int</span>[] xor = <span class="highlight-comment">// result of xor for the sample input data</span>
{
    <span class="highlight-number">-1</span>,       <span class="highlight-number">1</span>,
     <span class="highlight-number">1</span>,      <span class="highlight-number">-1</span>,
    <span class="highlight-number">-1</span>,       <span class="highlight-number">1</span>,
     <span class="highlight-number">1</span>,      <span class="highlight-number">-1</span>,
    <span class="highlight-number">-1</span>,       <span class="highlight-number">1</span>,
     <span class="highlight-number">1</span>,      <span class="highlight-number">-1</span>,
    <span class="highlight-number">-1</span>,       <span class="highlight-number">1</span>,
     <span class="highlight-number">1</span>,      <span class="highlight-number">-1</span>,
};


<span class="highlight-comment">// Create a new Cross-validation algorithm passing the data set size and the number of folds</span>
<span class="highlight-keyword">var</span> crossvalidation = <span class="highlight-keyword">new</span> CrossValidation&lt;SupportVectorMachine&lt;Linear, <span class="highlight-keyword">double</span>[]&gt;, <span class="highlight-keyword">double</span>[]&gt;()
{
    K = <span class="highlight-number">3</span>, <span class="highlight-comment">// Use 3 folds in cross-validation</span>

    <span class="highlight-comment">// Indicate how learning algorithms for the models should be created</span>
    Learner = (s) =&gt; <span class="highlight-keyword">new</span> SequentialMinimalOptimization&lt;Linear, <span class="highlight-keyword">double</span>[]&gt;()
    {
        Complexity = <span class="highlight-number">100</span>
    },

    <span class="highlight-comment">// Indicate how the performance of those models will be measured</span>
    Loss = (expected, actual, p) =&gt; <span class="highlight-keyword">new</span> ZeroOneLoss(expected).Loss(actual),

    Stratify = <span class="highlight-keyword">false</span>, <span class="highlight-comment">// do not force balancing of classes</span>
};

<span class="highlight-comment">// If needed, control the parallelization degree</span>
crossvalidation.ParallelOptions.MaxDegreeOfParallelism = <span class="highlight-number">1</span>;

<span class="highlight-comment">// Compute the cross-validation</span>
<span class="highlight-keyword">var</span> result = crossvalidation.Learn(data, xor);

<span class="highlight-comment">// Finally, access the measured performance.</span>
<span class="highlight-keyword">double</span> trainingErrors = result.Training.Mean; <span class="highlight-comment">// should be 0.30606060606060609 (+/- var. 0.083498622589531682)</span>
<span class="highlight-keyword">double</span> validationErrors = result.Validation.Mean; <span class="highlight-comment">// should be 0.3666666666666667 (+/- var. 0.023333333333333334)</span>

<span class="highlight-comment">// If desired, compute an aggregate confusion matrix for the validation sets:</span>
GeneralConfusionMatrix gcm = result.ToConfusionMatrix(data, xor);
<span class="highlight-keyword">double</span> accuracy = gcm.Accuracy; <span class="highlight-comment">// should be 0.625</span>
<span class="highlight-keyword">double</span> error = gcm.Error; <span class="highlight-comment">// should be 0.375</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Ensure results are reproducible</span>
Accord.Math.Random.Generator.Seed = <span class="highlight-number">0</span>;

<span class="highlight-comment">// This is a sample code on how to use Cross-Validation</span>
<span class="highlight-comment">// to assess the performance of Hidden Markov Models.</span>

<span class="highlight-comment">// Declare some testing data</span>
<span class="highlight-keyword">int</span>[][] inputs = <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[][]
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },   <span class="highlight-comment">// Class 0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },   <span class="highlight-comment">// Class 0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// Class 0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// Class 0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },   <span class="highlight-comment">// Class 0</span>

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// Class 1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// Class 1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// Class 1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },     <span class="highlight-comment">// Class 1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },   <span class="highlight-comment">// Class 1</span>

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },   <span class="highlight-comment">// Class 2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },   <span class="highlight-comment">// Class 2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> }, <span class="highlight-comment">// Class 2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },     <span class="highlight-comment">// Class 2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },   <span class="highlight-comment">// Class 2</span>
};

<span class="highlight-keyword">int</span>[] outputs = <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[]
{
    <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>, <span class="highlight-comment">// First  5 sequences are of class 0</span>
    <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>, <span class="highlight-comment">// Middle 5 sequences are of class 1</span>
    <span class="highlight-number">2</span>,<span class="highlight-number">2</span>,<span class="highlight-number">2</span>,<span class="highlight-number">2</span>,<span class="highlight-number">2</span>, <span class="highlight-comment">// Last   5 sequences are of class 2</span>
};

<span class="highlight-comment">// Create a new Cross-validation algorithm passing the data set size and the number of folds</span>
<span class="highlight-keyword">var</span> crossvalidation = <span class="highlight-keyword">new</span> CrossValidation&lt;HiddenMarkovClassifier, <span class="highlight-keyword">int</span>[]&gt;()
{
    K = <span class="highlight-number">3</span>, <span class="highlight-comment">// Use 3 folds in cross-validation</span>
    Learner = (s) =&gt; <span class="highlight-keyword">new</span> HiddenMarkovClassifierLearning()
    {
        Learner = (p) =&gt; <span class="highlight-keyword">new</span> BaumWelchLearning()
        {
            NumberOfStates = <span class="highlight-number">3</span>
        }
    },

    Loss = (expected, actual, p) =&gt; 
    {
        <span class="highlight-keyword">var</span> cm = <span class="highlight-keyword">new</span> GeneralConfusionMatrix(classes: p.Model.NumberOfClasses, expected: expected, predicted: actual);
        p.Variance = cm.Variance;
        <span class="highlight-keyword">return</span> p.Value = cm.Kappa;
    },

    Stratify = <span class="highlight-keyword">false</span>,
};

<span class="highlight-comment">// If needed, control the parallelization degree</span>
crossvalidation.ParallelOptions.MaxDegreeOfParallelism = <span class="highlight-number">1</span>;

<span class="highlight-comment">// Compute the cross-validation</span>
<span class="highlight-keyword">var</span> result = crossvalidation.Learn(inputs, outputs);

<span class="highlight-comment">// If desired, compute an aggregate confusion matrix for the validation sets:</span>
GeneralConfusionMatrix gcm = result.ToConfusionMatrix(inputs, outputs);

<span class="highlight-comment">// Finally, access the measured performance.</span>
<span class="highlight-keyword">double</span> trainingErrors = result.Training.Mean;
<span class="highlight-keyword">double</span> validationErrors = result.Validation.Mean;

<span class="highlight-keyword">double</span> trainingErrorVar = result.Training.Variance;
<span class="highlight-keyword">double</span> validationErrorVar = result.Validation.Variance;

<span class="highlight-keyword">double</span> trainingErrorPooledVar = result.Training.PooledVariance;
<span class="highlight-keyword">double</span> validationErrorPooledVar = result.Validation.PooledVariance;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Ensure we have reproducible results</span>
Accord.Math.Random.Generator.Seed = <span class="highlight-number">0</span>;

<span class="highlight-comment">// Get some data to be learned. We will be using the Wiconsin's</span>
<span class="highlight-comment">// (Diagnostic) Breast Cancer dataset, where the goal is to determine</span>
<span class="highlight-comment">// whether the characteristics extracted from a breast cancer exam</span>
<span class="highlight-comment">// correspond to a malignant or benign type of cancer:</span>
<span class="highlight-keyword">var</span> data = <span class="highlight-keyword">new</span> WisconsinDiagnosticBreastCancer();
<span class="highlight-keyword">double</span>[][] input = data.Features; <span class="highlight-comment">// 569 samples, 30-dimensional features</span>
<span class="highlight-keyword">int</span>[] output = data.ClassLabels;  <span class="highlight-comment">// 569 samples, 2 different class labels</span>

<span class="highlight-comment">// Let's say we want to measure the cross-validation performance of</span>
<span class="highlight-comment">// a decision tree with a maximum tree height of 5 and where variables</span>
<span class="highlight-comment">// are able to join the decision path at most 2 times during evaluation:</span>
<span class="highlight-keyword">var</span> cv = CrossValidation.Create(

    k: <span class="highlight-number">10</span>, <span class="highlight-comment">// We will be using 10-fold cross validation</span>

    learner: (p) =&gt; <span class="highlight-keyword">new</span> C45Learning() <span class="highlight-comment">// here we create the learning algorithm</span>
    {
        Join = <span class="highlight-number">2</span>,
        MaxHeight = <span class="highlight-number">5</span>
    },

    <span class="highlight-comment">// Now we have to specify how the tree performance should be measured:</span>
    loss: (actual, expected, p) =&gt; <span class="highlight-keyword">new</span> ZeroOneLoss(expected).Loss(actual),

    <span class="highlight-comment">// This function can be used to perform any special</span>
    <span class="highlight-comment">// operations before the actual learning is done, but</span>
    <span class="highlight-comment">// here we will just leave it as simple as it can be:</span>
    fit: (teacher, x, y, w) =&gt; teacher.Learn(x, y, w),

    <span class="highlight-comment">// Finally, we have to pass the input and output data</span>
    <span class="highlight-comment">// that will be used in cross-validation. </span>
    x: input, y: output
);

<span class="highlight-comment">// After the cross-validation object has been created,</span>
<span class="highlight-comment">// we can call its .Learn method with the input and </span>
<span class="highlight-comment">// output data that will be partitioned into the folds:</span>
<span class="highlight-keyword">var</span> result = cv.Learn(input, output);

<span class="highlight-comment">// We can grab some information about the problem:</span>
<span class="highlight-keyword">int</span> numberOfSamples = result.NumberOfSamples; <span class="highlight-comment">// should be 569</span>
<span class="highlight-keyword">int</span> numberOfInputs = result.NumberOfInputs;   <span class="highlight-comment">// should be 30</span>
<span class="highlight-keyword">int</span> numberOfOutputs = result.NumberOfOutputs; <span class="highlight-comment">// should be 2</span>

<span class="highlight-keyword">double</span> trainingError = result.Training.Mean; <span class="highlight-comment">// should be 0.017771153143274855</span>
<span class="highlight-keyword">double</span> validationError = result.Validation.Mean; <span class="highlight-comment">// should be 0.0755952380952381</span>

<span class="highlight-comment">// If desired, compute an aggregate confusion matrix for the validation sets:</span>
GeneralConfusionMatrix gcm = result.ToConfusionMatrix(input, output);
<span class="highlight-keyword">double</span> accuracy = gcm.Accuracy; <span class="highlight-comment">// result should be 0.92442882249560632</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Ensure we have reproducible results</span>
Accord.Math.Random.Generator.Seed = <span class="highlight-number">0</span>;

<span class="highlight-comment">// Let's say we have the following data to be classified</span>
<span class="highlight-comment">// into three possible classes. Those are the samples:</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">int</span>[][] inputs =
{
    <span class="highlight-comment">//               input      output</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0 </span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  0</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  1</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">//  2</span>
};

<span class="highlight-keyword">int</span>[] outputs = <span class="highlight-comment">// those are the class labels</span>
{
    <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>,
    <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,
    <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>,
};

<span class="highlight-comment">// Let's say we want to measure the cross-validation </span>
<span class="highlight-comment">// performance of Naive Bayes on the above data set:</span>
<span class="highlight-keyword">var</span> cv = CrossValidation.Create(

    k: <span class="highlight-number">10</span>, <span class="highlight-comment">// We will be using 10-fold cross validation</span>

    <span class="highlight-comment">// First we define the learning algorithm:</span>
    learner: (p) =&gt; <span class="highlight-keyword">new</span> NaiveBayesLearning(),

    <span class="highlight-comment">// Now we have to specify how the n.b. performance should be measured:</span>
    loss: (actual, expected, p) =&gt; <span class="highlight-keyword">new</span> ZeroOneLoss(expected).Loss(actual),

    <span class="highlight-comment">// This function can be used to perform any special</span>
    <span class="highlight-comment">// operations before the actual learning is done, but</span>
    <span class="highlight-comment">// here we will just leave it as simple as it can be:</span>
    fit: (teacher, x, y, w) =&gt; teacher.Learn(x, y, w),

    <span class="highlight-comment">// Finally, we have to pass the input and output data</span>
    <span class="highlight-comment">// that will be used in cross-validation. </span>
    x: inputs, y: outputs
);

<span class="highlight-comment">// After the cross-validation object has been created,</span>
<span class="highlight-comment">// we can call its .Learn method with the input and </span>
<span class="highlight-comment">// output data that will be partitioned into the folds:</span>
<span class="highlight-keyword">var</span> result = cv.Learn(inputs, outputs);

<span class="highlight-comment">// We can grab some information about the problem:</span>
<span class="highlight-keyword">int</span> numberOfSamples = result.NumberOfSamples; <span class="highlight-comment">// should be 15</span>
<span class="highlight-keyword">int</span> numberOfInputs = result.NumberOfInputs;   <span class="highlight-comment">// should be 4</span>
<span class="highlight-keyword">int</span> numberOfOutputs = result.NumberOfOutputs; <span class="highlight-comment">// should be 3</span>

<span class="highlight-keyword">double</span> trainingError = result.Training.Mean; <span class="highlight-comment">// should be 0</span>
<span class="highlight-keyword">double</span> validationError = result.Validation.Mean; <span class="highlight-comment">// should be 0.15 (+/- var. 0.11388888888888887)</span>

<span class="highlight-comment">// If desired, compute an aggregate confusion matrix for the validation sets:</span>
GeneralConfusionMatrix gcm = result.ToConfusionMatrix(inputs, outputs);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_Performance.htm">Accord.MachineLearning.Performance Namespace</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>